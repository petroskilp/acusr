var EqtlViolinPlot=function(e){"use strict";var t={},n={},r=34,a=10,i=13;function f(e){return new Function("d","return {"+e.map(function(e,t){return JSON.stringify(e)+": d["+t+"]"}).join(",")+"}")}function c(e){var c=new RegExp('["'+e+"\n\r]"),o=e.charCodeAt(0);function u(e,f){var c,u=[],s=e.length,l=0,d=0,h=s<=0,b=!1;function p(){if(h)return n;if(b)return b=!1,t;var f,c,u=l;if(e.charCodeAt(u)===r){for(;l++<s&&e.charCodeAt(l)!==r||e.charCodeAt(++l)===r;);return(f=l)>=s?h=!0:(c=e.charCodeAt(l++))===a?b=!0:c===i&&(b=!0,e.charCodeAt(l)===a&&++l),e.slice(u+1,f-1).replace(/""/g,'"')}for(;l<s;){if((c=e.charCodeAt(f=l++))===a)b=!0;else if(c===i)b=!0,e.charCodeAt(l)===a&&++l;else if(c!==o)continue;return e.slice(u,f)}return h=!0,e.slice(u,s)}for(e.charCodeAt(s-1)===a&&--s,e.charCodeAt(s-1)===i&&--s;(c=p())!==n;){for(var g=[];c!==t&&c!==n;)g.push(c),c=p();f&&null==(g=f(g,d++))||u.push(g)}return u}function s(t){return t.map(l).join(e)}function l(e){return null==e?"":c.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,r,a=u(e,function(e,a){if(n)return n(e,a-1);r=e,n=t?function(e,t){var n=f(e);return function(r,a){return t(n(r),a,e)}}(e,t):f(e)});return a.columns=r||[],a},parseRows:u,format:function(t,n){return null==n&&(n=function(e){var t=Object.create(null),n=[];return e.forEach(function(e){for(var r in e)r in t||n.push(t[r]=r)}),n}(t)),[n.map(l).join(e)].concat(t.map(function(t){return n.map(function(e){return l(t[e])}).join(e)})).join("\n")},formatRows:function(e){return e.map(s).join("\n")}}}c(","),c("\t");function o(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.json()}var u="http://www.w3.org/1999/xhtml",s={svg:"http://www.w3.org/2000/svg",xhtml:u,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function l(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),s.hasOwnProperty(t)?{space:s[t],local:e}:e}function d(e){var t=l(e);return(t.local?function(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}:function(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===u&&t.documentElement.namespaceURI===u?t.createElement(e):t.createElementNS(n,e)}})(t)}function h(){}function b(e){return null==e?h:function(){return this.querySelector(e)}}function p(){return[]}function g(e){return null==e?p:function(){return this.querySelectorAll(e)}}var v=function(e){return function(){return this.matches(e)}};if("undefined"!=typeof document){var m=document.documentElement;if(!m.matches){var y=m.webkitMatchesSelector||m.msMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector;v=function(e){return function(){return y.call(this,e)}}}}var w=v;function x(e){return new Array(e.length)}function _(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}_.prototype={constructor:_,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var M="$";function A(e,t,n,r,a,i){for(var f,c=0,o=t.length,u=i.length;c<u;++c)(f=t[c])?(f.__data__=i[c],r[c]=f):n[c]=new _(e,i[c]);for(;c<o;++c)(f=t[c])&&(a[c]=f)}function T(e,t,n,r,a,i,f){var c,o,u,s={},l=t.length,d=i.length,h=new Array(l);for(c=0;c<l;++c)(o=t[c])&&(h[c]=u=M+f.call(o,o.__data__,c,t),u in s?a[c]=o:s[u]=o);for(c=0;c<d;++c)(o=s[u=M+f.call(e,i[c],c,i)])?(r[c]=o,o.__data__=i[c],s[u]=null):n[c]=new _(e,i[c]);for(c=0;c<l;++c)(o=t[c])&&s[h[c]]===o&&(a[c]=o)}function S(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function k(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function E(e,t){return e.style.getPropertyValue(t)||k(e).getComputedStyle(e,null).getPropertyValue(t)}function N(e){return e.trim().split(/^|\s+/)}function C(e){return e.classList||new D(e)}function D(e){this._node=e,this._names=N(e.getAttribute("class")||"")}function I(e,t){for(var n=C(e),r=-1,a=t.length;++r<a;)n.add(t[r])}function P(e,t){for(var n=C(e),r=-1,a=t.length;++r<a;)n.remove(t[r])}function z(){this.textContent=""}function U(){this.innerHTML=""}function F(){this.nextSibling&&this.parentNode.appendChild(this)}function Y(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function G(){return null}function L(){var e=this.parentNode;e&&e.removeChild(this)}function V(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function R(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}D.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};var H={},O=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(H={mouseenter:"mouseover",mouseleave:"mouseout"}));function j(e,t,n){return e=q(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function q(e,t,n){return function(r){var a=O;O=r;try{e.call(this,this.__data__,t,n)}finally{O=a}}}function X(e){return function(){var t=this.__on;if(t){for(var n,r=0,a=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?t.length=a:delete this.__on}}}function B(e,t,n){var r=H.hasOwnProperty(e.type)?j:q;return function(a,i,f){var c,o=this.__on,u=r(t,i,f);if(o)for(var s=0,l=o.length;s<l;++s)if((c=o[s]).type===e.type&&c.name===e.name)return this.removeEventListener(c.type,c.listener,c.capture),this.addEventListener(c.type,c.listener=u,c.capture=n),void(c.value=t);this.addEventListener(e.type,u,n),c={type:e.type,name:e.name,value:t,listener:u,capture:n},o?o.push(c):this.__on=[c]}}function Z(e,t,n){var r=k(e),a=r.CustomEvent;"function"==typeof a?a=new a(t,n):(a=r.document.createEvent("Event"),n?(a.initEvent(t,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(t,!1,!1)),e.dispatchEvent(a)}var W=[null];function K(e,t){this._groups=e,this._parents=t}function Q(){return new K([[document.documentElement]],W)}function J(e){return"string"==typeof e?new K([[document.querySelector(e)]],[document.documentElement]):new K([[e]],W)}function ee(){for(var e,t=O;e=t.sourceEvent;)t=e;return t}function te(e){var t=ee();return t.changedTouches&&(t=t.changedTouches[0]),function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var a=e.getBoundingClientRect();return[t.clientX-a.left-e.clientLeft,t.clientY-a.top-e.clientTop]}(e,t)}function ne(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}K.prototype=Q.prototype={constructor:K,select:function(e){"function"!=typeof e&&(e=b(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,f,c=t[a],o=c.length,u=r[a]=new Array(o),s=0;s<o;++s)(i=c[s])&&(f=e.call(i,i.__data__,s,c))&&("__data__"in i&&(f.__data__=i.__data__),u[s]=f);return new K(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=g(e));for(var t=this._groups,n=t.length,r=[],a=[],i=0;i<n;++i)for(var f,c=t[i],o=c.length,u=0;u<o;++u)(f=c[u])&&(r.push(e.call(f,f.__data__,u,c)),a.push(f));return new K(r,a)},filter:function(e){"function"!=typeof e&&(e=w(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,f=t[a],c=f.length,o=r[a]=[],u=0;u<c;++u)(i=f[u])&&e.call(i,i.__data__,u,f)&&o.push(i);return new K(r,this._parents)},data:function(e,t){if(!e)return b=new Array(this.size()),s=-1,this.each(function(e){b[++s]=e}),b;var n,r=t?T:A,a=this._parents,i=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var f=i.length,c=new Array(f),o=new Array(f),u=new Array(f),s=0;s<f;++s){var l=a[s],d=i[s],h=d.length,b=e.call(l,l&&l.__data__,s,a),p=b.length,g=o[s]=new Array(p),v=c[s]=new Array(p);r(l,d,g,v,u[s]=new Array(h),b,t);for(var m,y,w=0,x=0;w<p;++w)if(m=g[w]){for(w>=x&&(x=w+1);!(y=v[x])&&++x<p;);m._next=y||null}}return(c=new K(c,a))._enter=o,c._exit=u,c},enter:function(){return new K(this._enter||this._groups.map(x),this._parents)},exit:function(){return new K(this._exit||this._groups.map(x),this._parents)},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,a=n.length,i=Math.min(r,a),f=new Array(r),c=0;c<i;++c)for(var o,u=t[c],s=n[c],l=u.length,d=f[c]=new Array(l),h=0;h<l;++h)(o=u[h]||s[h])&&(d[h]=o);for(;c<r;++c)f[c]=t[c];return new K(f,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,a=e[t],i=a.length-1,f=a[i];--i>=0;)(r=a[i])&&(f&&f!==r.nextSibling&&f.parentNode.insertBefore(r,f),f=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=S);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var f,c=n[i],o=c.length,u=a[i]=new Array(o),s=0;s<o;++s)(f=c[s])&&(u[s]=f);u.sort(t)}return new K(a,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each(function(){e[++t]=this}),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],a=0,i=r.length;a<i;++a){var f=r[a];if(f)return f}return null},size:function(){var e=0;return this.each(function(){++e}),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var a,i=t[n],f=0,c=i.length;f<c;++f)(a=i[f])&&e.call(a,a.__data__,f,i);return this},attr:function(e,t){var n=l(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}}:"function"==typeof t?n.local?function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}:function(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}:n.local?function(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}:function(e,t){return function(){this.setAttribute(e,t)}})(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?function(e){return function(){this.style.removeProperty(e)}}:"function"==typeof t?function(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}:function(e,t,n){return function(){this.style.setProperty(e,t,n)}})(e,t,null==n?"":n)):E(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?function(e){return function(){delete this[e]}}:"function"==typeof t?function(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}:function(e,t){return function(){this[e]=t}})(e,t)):this.node()[e]},classed:function(e,t){var n=N(e+"");if(arguments.length<2){for(var r=C(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof t?function(e,t){return function(){(t.apply(this,arguments)?I:P)(this,e)}}:t?function(e){return function(){I(this,e)}}:function(e){return function(){P(this,e)}})(n,t))},text:function(e){return arguments.length?this.each(null==e?z:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}:function(e){return function(){this.textContent=e}})(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?U:("function"==typeof e?function(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}:function(e){return function(){this.innerHTML=e}})(e)):this.node().innerHTML},raise:function(){return this.each(F)},lower:function(){return this.each(Y)},append:function(e){var t="function"==typeof e?e:d(e);return this.select(function(){return this.appendChild(t.apply(this,arguments))})},insert:function(e,t){var n="function"==typeof e?e:d(e),r=null==t?G:"function"==typeof t?t:b(t);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(L)},clone:function(e){return this.select(e?R:V)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,a,i=function(e){return e.trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}})}(e+""),f=i.length;if(!(arguments.length<2)){for(c=t?B:X,null==n&&(n=!1),r=0;r<f;++r)this.each(c(i[r],t,n));return this}var c=this.node().__on;if(c)for(var o,u=0,s=c.length;u<s;++u)for(r=0,o=c[u];r<f;++r)if((a=i[r]).type===o.type&&a.name===o.name)return o.value},dispatch:function(e,t){return this.each(("function"==typeof t?function(e,t){return function(){return Z(this,e,t.apply(this,arguments))}}:function(e,t){return function(){return Z(this,e,t)}})(e,t))}};var re,ae,ie=(1===(re=ne).length&&(ae=re,re=function(e,t){return ne(ae(e),t)}),{left:function(e,t,n,r){for(null==n&&(n=0),null==r&&(r=e.length);n<r;){var a=n+r>>>1;re(e[a],t)<0?n=a+1:r=a}return n},right:function(e,t,n,r){for(null==n&&(n=0),null==r&&(r=e.length);n<r;){var a=n+r>>>1;re(e[a],t)>0?r=a:n=a+1}return n}}).right;function fe(e){return null===e?NaN:+e}function ce(e,t){var n=function(e,t){var n,r,a=e.length,i=0,f=-1,c=0,o=0;if(null==t)for(;++f<a;)isNaN(n=fe(e[f]))||(o+=(r=n-c)*(n-(c+=r/++i)));else for(;++f<a;)isNaN(n=fe(t(e[f],f,e)))||(o+=(r=n-c)*(n-(c+=r/++i)));if(i>1)return o/(i-1)}(e,t);return n?Math.sqrt(n):n}function oe(e,t){var n,r,a,i=e.length,f=-1;if(null==t){for(;++f<i;)if(null!=(n=e[f])&&n>=n)for(r=a=n;++f<i;)null!=(n=e[f])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++f<i;)if(null!=(n=t(e[f],f,e))&&n>=n)for(r=a=n;++f<i;)null!=(n=t(e[f],f,e))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]}function ue(e,t,n){e=+e,t=+t,n=(a=arguments.length)<2?(t=e,e=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(a);++r<a;)i[r]=e+r*n;return i}var se=Math.sqrt(50),le=Math.sqrt(10),de=Math.sqrt(2);function he(e,t,n){var r=(t-e)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=se?10:i>=le?5:i>=de?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=se?10:i>=le?5:i>=de?2:1)}function be(e,t,n){if(null==n&&(n=fe),r=e.length){if((t=+t)<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,a=(r-1)*t,i=Math.floor(a),f=+n(e[i],i,e);return f+(+n(e[i+1],i+1,e)-f)*(a-i)}}function pe(e,t){var n,r,a=e.length,i=-1;if(null==t){for(;++i<a;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<a;)null!=(n=e[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<a;)null!=(n=t(e[i],i,e))&&n>r&&(r=n);return r}function ge(e,t){var n,r=e.length,a=-1,i=[];if(null==t)for(;++a<r;)isNaN(n=fe(e[a]))||i.push(n);else for(;++a<r;)isNaN(n=fe(t(e[a],a,e)))||i.push(n);return be(i.sort(ne),.5)}function ve(e,t){var n,r,a=e.length,i=-1;if(null==t){for(;++i<a;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<a;)null!=(n=e[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<a;)null!=(n=t(e[i],i,e))&&r>n&&(r=n);return r}function me(e){if(0==$(`#${e}`).length){let t=`Input Error: DOM ID ${e} is not found.`;throw console.warn(t),t}}function ye(e={x:20,y:20,scaleFactor:1,diverging:!1,bubble:!1}){let t=ue(1,e.x+1),n=ue(1,e.y+1),r=[];return t.forEach(t=>{t="x"+t.toString(),n.forEach(n=>{n="y"+n.toString();let a=Math.random()*e.scaleFactor;a=e.diverging&&Math.random()<.5?-a:a,r.push({x:t,y:n,value:a,displayValue:parseFloat(a.toExponential()).toPrecision(3),r:e.bubble?30*Math.random():void 0})})}),r}var we=function e(t){function n(e,n){var r,a;return e=null==e?0:+e,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*t()-1,i=2*t()-1,a=r*r+i*i}while(!a||a>1);return e+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=e,n}(function(){return Math.random()});function xe(){}function _e(e,t){var n=new xe;if(e instanceof xe)e.each(function(e,t){n.set(t,e)});else if(Array.isArray(e)){var r,a=-1,i=e.length;if(null==t)for(;++a<i;)n.set(a,e[a]);else for(;++a<i;)n.set(t(r=e[a],a,e),r)}else if(e)for(var f in e)n.set(f,e[f]);return n}function Me(){var e,t,n,r=[],a=[];function i(n,a,f,c){if(a>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var o,u,s,l=-1,d=n.length,h=r[a++],b=_e(),p=f();++l<d;)(s=b.get(o=h(u=n[l])+""))?s.push(u):b.set(o,[u]);return b.each(function(e,t){c(p,t,i(e,a,f,c))}),p}return n={object:function(e){return i(e,0,Ae,Te)},map:function(e){return i(e,0,Se,ke)},entries:function(e){return function e(n,i){if(++i>r.length)return n;var f,c=a[i-1];return null!=t&&i>=r.length?f=n.entries():(f=[],n.each(function(t,n){f.push({key:n,values:e(t,i)})})),null!=c?f.sort(function(e,t){return c(e.key,t.key)}):f}(i(e,0,Se,ke),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return a[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}}function Ae(){return{}}function Te(e,t,n){e[t]=n}function Se(){return _e()}function ke(e,t,n){e.set(t,n)}function Ee(){}xe.prototype=_e.prototype={constructor:xe,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var Ne=_e.prototype;Ee.prototype=function(e,t){var n=new Ee;if(e instanceof Ee)e.each(function(e){n.add(e)});else if(e){var r=-1,a=e.length;if(null==t)for(;++r<a;)n.add(e[r]);else for(;++r<a;)n.add(t(e[r],r,e))}return n}.prototype={constructor:Ee,has:Ne.has,add:function(e){return this["$"+(e+="")]=e,this},remove:Ne.remove,clear:Ne.clear,values:Ne.keys,size:Ne.size,empty:Ne.empty,each:Ne.each};var Ce=Array.prototype,De=Ce.map,Ie=Ce.slice,Pe={name:"implicit"};function $e(){var e,t,n=function e(t){var n=_e(),r=[],a=Pe;function i(e){var i=e+"",f=n.get(i);if(!f){if(a!==Pe)return a;n.set(i,f=r.push(e))}return t[(f-1)%t.length]}return t=null==t?[]:Ie.call(t),i.domain=function(e){if(!arguments.length)return r.slice();r=[],n=_e();for(var t,a,f=-1,c=e.length;++f<c;)n.has(a=(t=e[f])+"")||n.set(a,r.push(t));return i},i.range=function(e){return arguments.length?(t=Ie.call(e),i):t.slice()},i.unknown=function(e){return arguments.length?(a=e,i):a},i.copy=function(){return e().domain(r).range(t).unknown(a)},i}().unknown(void 0),r=n.domain,a=n.range,i=[0,1],f=!1,c=0,o=0,u=.5;function s(){var n=r().length,s=i[1]<i[0],l=i[s-0],d=i[1-s];e=(d-l)/Math.max(1,n-c+2*o),f&&(e=Math.floor(e)),l+=(d-l-e*(n-c))*u,t=e*(1-c),f&&(l=Math.round(l),t=Math.round(t));var h=ue(n).map(function(t){return l+e*t});return a(s?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),s()):r()},n.range=function(e){return arguments.length?(i=[+e[0],+e[1]],s()):i.slice()},n.rangeRound=function(e){return i=[+e[0],+e[1]],f=!0,s()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(f=!!e,s()):f},n.padding=function(e){return arguments.length?(c=o=Math.max(0,Math.min(1,e)),s()):c},n.paddingInner=function(e){return arguments.length?(c=Math.max(0,Math.min(1,e)),s()):c},n.paddingOuter=function(e){return arguments.length?(o=Math.max(0,Math.min(1,e)),s()):o},n.align=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),s()):u},n.copy=function(){return $e().domain(r()).range(i).round(f).paddingInner(c).paddingOuter(o).align(u)},s()}function ze(e,t,n){e.prototype=t.prototype=n,n.constructor=e}function Ue(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Fe(){}var Ye="\\s*([+-]?\\d+)\\s*",Ge="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Le="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ve=/^#([0-9a-f]{3})$/,Re=/^#([0-9a-f]{6})$/,He=new RegExp("^rgb\\("+[Ye,Ye,Ye]+"\\)$"),Oe=new RegExp("^rgb\\("+[Le,Le,Le]+"\\)$"),je=new RegExp("^rgba\\("+[Ye,Ye,Ye,Ge]+"\\)$"),qe=new RegExp("^rgba\\("+[Le,Le,Le,Ge]+"\\)$"),Xe=new RegExp("^hsl\\("+[Ge,Le,Le]+"\\)$"),Be=new RegExp("^hsla\\("+[Ge,Le,Le,Ge]+"\\)$"),Ze={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function We(e){var t;return e=(e+"").trim().toLowerCase(),(t=Ve.exec(e))?new tt((t=parseInt(t[1],16))>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):(t=Re.exec(e))?Ke(parseInt(t[1],16)):(t=He.exec(e))?new tt(t[1],t[2],t[3],1):(t=Oe.exec(e))?new tt(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=je.exec(e))?Qe(t[1],t[2],t[3],t[4]):(t=qe.exec(e))?Qe(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Xe.exec(e))?rt(t[1],t[2]/100,t[3]/100,1):(t=Be.exec(e))?rt(t[1],t[2]/100,t[3]/100,t[4]):Ze.hasOwnProperty(e)?Ke(Ze[e]):"transparent"===e?new tt(NaN,NaN,NaN,0):null}function Ke(e){return new tt(e>>16&255,e>>8&255,255&e,1)}function Qe(e,t,n,r){return r<=0&&(e=t=n=NaN),new tt(e,t,n,r)}function Je(e){return e instanceof Fe||(e=We(e)),e?new tt((e=e.rgb()).r,e.g,e.b,e.opacity):new tt}function et(e,t,n,r){return 1===arguments.length?Je(e):new tt(e,t,n,null==r?1:r)}function tt(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function nt(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function rt(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new at(e,t,n,r)}function at(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function it(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}ze(Fe,We,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),ze(tt,et,Ue(Fe,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new tt(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new tt(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+nt(this.r)+nt(this.g)+nt(this.b)},toString:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}})),ze(at,function(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof at)return new at(e.h,e.s,e.l,e.opacity);if(e instanceof Fe||(e=We(e)),!e)return new at;if(e instanceof at)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,a=Math.min(t,n,r),i=Math.max(t,n,r),f=NaN,c=i-a,o=(i+a)/2;return c?(f=t===i?(n-r)/c+6*(n<r):n===i?(r-t)/c+2:(t-n)/c+4,c/=o<.5?i+a:2-i-a,f*=60):c=o>0&&o<1?0:f,new at(f,c,o,e.opacity)}(e):new at(e,t,n,null==r?1:r)},Ue(Fe,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new at(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new at(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,a=2*n-r;return new tt(it(e>=240?e-240:e+120,a,r),it(e,a,r),it(e<120?e+240:e-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var ft=Math.PI/180,ct=180/Math.PI,ot=.96422,ut=1,st=.82521,lt=4/29,dt=6/29,ht=3*dt*dt,bt=dt*dt*dt;function pt(e){if(e instanceof gt)return new gt(e.l,e.a,e.b,e.opacity);if(e instanceof xt){if(isNaN(e.h))return new gt(e.l,0,0,e.opacity);var t=e.h*ft;return new gt(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}e instanceof tt||(e=Je(e));var n,r,a=wt(e.r),i=wt(e.g),f=wt(e.b),c=vt((.2225045*a+.7168786*i+.0606169*f)/ut);return a===i&&i===f?n=r=c:(n=vt((.4360747*a+.3850649*i+.1430804*f)/ot),r=vt((.0139322*a+.0971045*i+.7141733*f)/st)),new gt(116*c-16,500*(n-c),200*(c-r),e.opacity)}function gt(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function vt(e){return e>bt?Math.pow(e,1/3):e/ht+lt}function mt(e){return e>dt?e*e*e:ht*(e-lt)}function yt(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function wt(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function xt(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}ze(gt,function(e,t,n,r){return 1===arguments.length?pt(e):new gt(e,t,n,null==r?1:r)},Ue(Fe,{brighter:function(e){return new gt(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new gt(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new tt(yt(3.1338561*(t=ot*mt(t))-1.6168667*(e=ut*mt(e))-.4906146*(n=st*mt(n))),yt(-.9787684*t+1.9161415*e+.033454*n),yt(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),ze(xt,function(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof xt)return new xt(e.h,e.c,e.l,e.opacity);if(e instanceof gt||(e=pt(e)),0===e.a&&0===e.b)return new xt(NaN,0,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*ct;return new xt(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}(e):new xt(e,t,n,null==r?1:r)},Ue(Fe,{brighter:function(e){return new xt(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new xt(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return pt(this).rgb()}}));var _t=-.14861,Mt=1.78277,At=-.29227,Tt=-.90649,St=1.97294,kt=St*Tt,Et=St*Mt,Nt=Mt*At-Tt*_t;function Ct(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof Dt)return new Dt(e.h,e.s,e.l,e.opacity);e instanceof tt||(e=Je(e));var t=e.r/255,n=e.g/255,r=e.b/255,a=(Nt*r+kt*t-Et*n)/(Nt+kt-Et),i=r-a,f=(St*(n-a)-At*i)/Tt,c=Math.sqrt(f*f+i*i)/(St*a*(1-a)),o=c?Math.atan2(f,i)*ct-120:NaN;return new Dt(o<0?o+360:o,c,a,e.opacity)}(e):new Dt(e,t,n,null==r?1:r)}function Dt(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function It(e){return function(){return e}}function Pt(e,t){return function(n){return e+n*t}}function $t(e){return 1==(e=+e)?zt:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):It(isNaN(t)?n:t)}}function zt(e,t){var n=t-e;return n?Pt(e,n):It(isNaN(e)?t:e)}ze(Dt,Ct,Ue(Fe,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Dt(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Dt(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*ft,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),a=Math.sin(e);return new tt(255*(t+n*(_t*r+Mt*a)),255*(t+n*(At*r+Tt*a)),255*(t+n*(St*r)),this.opacity)}}));var Ut=function e(t){var n=$t(t);function r(e,t){var r=n((e=et(e)).r,(t=et(t)).r),a=n(e.g,t.g),i=n(e.b,t.b),f=zt(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=a(t),e.b=i(t),e.opacity=f(t),e+""}}return r.gamma=e,r}(1);var Ft,Yt=(Ft=function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),a=e[r],i=e[r+1],f=r>0?e[r-1]:2*a-i,c=r<t-1?e[r+2]:2*i-a;return function(e,t,n,r,a){var i=e*e,f=i*e;return((1-3*e+3*i-f)*t+(4-6*i+3*f)*n+(1+3*e+3*i-3*f)*r+f*a)/6}((n-r/t)*t,f,a,i,c)}},function(e){var t,n,r=e.length,a=new Array(r),i=new Array(r),f=new Array(r);for(t=0;t<r;++t)n=et(e[t]),a[t]=n.r||0,i[t]=n.g||0,f[t]=n.b||0;return a=Ft(a),i=Ft(i),f=Ft(f),n.opacity=1,function(e){return n.r=a(e),n.g=i(e),n.b=f(e),n+""}});function Gt(e,t){return t-=e=+e,function(n){return e+t*n}}var Lt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Vt=new RegExp(Lt.source,"g");function Rt(e,t){var n,r,a,i=Lt.lastIndex=Vt.lastIndex=0,f=-1,c=[],o=[];for(e+="",t+="";(n=Lt.exec(e))&&(r=Vt.exec(t));)(a=r.index)>i&&(a=t.slice(i,a),c[f]?c[f]+=a:c[++f]=a),(n=n[0])===(r=r[0])?c[f]?c[f]+=r:c[++f]=r:(c[++f]=null,o.push({i:f,x:Gt(n,r)})),i=Vt.lastIndex;return i<t.length&&(a=t.slice(i),c[f]?c[f]+=a:c[++f]=a),c.length<2?o[0]?function(e){return function(t){return e(t)+""}}(o[0].x):function(e){return function(){return e}}(t):(t=o.length,function(e){for(var n,r=0;r<t;++r)c[(n=o[r]).i]=n.x(e);return c.join("")})}function Ht(e,t){var n,r=typeof t;return null==t||"boolean"===r?It(t):("number"===r?Gt:"string"===r?(n=We(t))?(t=n,Ut):Rt:t instanceof We?Ut:t instanceof Date?function(e,t){var n=new Date;return t-=e=+e,function(r){return n.setTime(e+t*r),n}}:Array.isArray(t)?function(e,t){var n,r=t?t.length:0,a=e?Math.min(r,e.length):0,i=new Array(a),f=new Array(r);for(n=0;n<a;++n)i[n]=Ht(e[n],t[n]);for(;n<r;++n)f[n]=t[n];return function(e){for(n=0;n<a;++n)f[n]=i[n](e);return f}}:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?function(e,t){var n,r={},a={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=Ht(e[n],t[n]):a[n]=t[n];return function(e){for(n in r)a[n]=r[n](e);return a}}:Gt)(e,t)}function Ot(e,t){return t-=e=+e,function(n){return Math.round(e+t*n)}}var jt,qt,Xt,Bt,Zt=180/Math.PI,Wt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Kt(e,t,n,r,a,i){var f,c,o;return(f=Math.sqrt(e*e+t*t))&&(e/=f,t/=f),(o=e*n+t*r)&&(n-=e*o,r-=t*o),(c=Math.sqrt(n*n+r*r))&&(n/=c,r/=c,o/=c),e*r<t*n&&(e=-e,t=-t,o=-o,f=-f),{translateX:a,translateY:i,rotate:Math.atan2(t,e)*Zt,skewX:Math.atan(o)*Zt,scaleX:f,scaleY:c}}function Qt(e,t,n,r){function a(e){return e.length?e.pop()+" ":""}return function(i,f){var c=[],o=[];return i=e(i),f=e(f),function(e,r,a,i,f,c){if(e!==a||r!==i){var o=f.push("translate(",null,t,null,n);c.push({i:o-4,x:Gt(e,a)},{i:o-2,x:Gt(r,i)})}else(a||i)&&f.push("translate("+a+t+i+n)}(i.translateX,i.translateY,f.translateX,f.translateY,c,o),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:Gt(e,t)})):t&&n.push(a(n)+"rotate("+t+r)}(i.rotate,f.rotate,c,o),function(e,t,n,i){e!==t?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:Gt(e,t)}):t&&n.push(a(n)+"skewX("+t+r)}(i.skewX,f.skewX,c,o),function(e,t,n,r,i,f){if(e!==n||t!==r){var c=i.push(a(i)+"scale(",null,",",null,")");f.push({i:c-4,x:Gt(e,n)},{i:c-2,x:Gt(t,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,f.scaleX,f.scaleY,c,o),i=f=null,function(e){for(var t,n=-1,r=o.length;++n<r;)c[(t=o[n]).i]=t.x(e);return c.join("")}}}var Jt=Qt(function(e){return"none"===e?Wt:(jt||(jt=document.createElement("DIV"),qt=document.documentElement,Xt=document.defaultView),jt.style.transform=e,e=Xt.getComputedStyle(qt.appendChild(jt),null).getPropertyValue("transform"),qt.removeChild(jt),Kt(+(e=e.slice(7,-1).split(","))[0],+e[1],+e[2],+e[3],+e[4],+e[5]))},"px, ","px)","deg)"),en=Qt(function(e){return null==e?Wt:(Bt||(Bt=document.createElementNS("http://www.w3.org/2000/svg","g")),Bt.setAttribute("transform",e),(e=Bt.transform.baseVal.consolidate())?Kt((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):Wt)},", ",")",")");Math.SQRT2;function tn(e){return function t(n){function r(t,r){var a=e((t=Ct(t)).h,(r=Ct(r)).h),i=zt(t.s,r.s),f=zt(t.l,r.l),c=zt(t.opacity,r.opacity);return function(e){return t.h=a(e),t.s=i(e),t.l=f(Math.pow(e,n)),t.opacity=c(e),t+""}}return n=+n,r.gamma=t,r}(1)}tn(function(e,t){var n=t-e;return n?Pt(e,n>180||n<-180?n-360*Math.round(n/360):n):It(isNaN(e)?t:e)});var nn=tn(zt);function rn(e){return+e}var an=[0,1];function fn(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:(n=t,function(){return n});var n}function cn(e,t,n,r){var a=e[0],i=e[1],f=t[0],c=t[1];return i<a?(a=n(i,a),f=r(c,f)):(a=n(a,i),f=r(f,c)),function(e){return f(a(e))}}function on(e,t,n,r){var a=Math.min(e.length,t.length)-1,i=new Array(a),f=new Array(a),c=-1;for(e[a]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++c<a;)i[c]=n(e[c],e[c+1]),f[c]=r(t[c],t[c+1]);return function(t){var n=ie(e,t,1,a)-1;return f[n](i[n](t))}}function un(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]}function sn(e){return(e=un(Math.abs(e)))?e[1]:NaN}var ln,dn=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function hn(e){return new bn(e)}function bn(e){if(!(t=dn.exec(e)))throw new Error("invalid format: "+e);var t;this.fill=t[1]||" ",this.align=t[2]||">",this.sign=t[3]||"-",this.symbol=t[4]||"",this.zero=!!t[5],this.width=t[6]&&+t[6],this.comma=!!t[7],this.precision=t[8]&&+t[8].slice(1),this.trim=!!t[9],this.type=t[10]||""}function pn(e,t){var n=un(e,t);if(!n)return e+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}hn.prototype=bn.prototype,bn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var gn={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return pn(100*e,t)},r:pn,s:function(e,t){var n=un(e,t);if(!n)return e+"";var r=n[0],a=n[1],i=a-(ln=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,f=r.length;return i===f?r:i>f?r+new Array(i-f+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+un(e,Math.max(0,t+i-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}};function vn(e){return e}var mn,yn,wn,xn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function _n(e){var t,n,r=e.grouping&&e.thousands?(t=e.grouping,n=e.thousands,function(e,r){for(var a=e.length,i=[],f=0,c=t[0],o=0;a>0&&c>0&&(o+c+1>r&&(c=Math.max(1,r-o)),i.push(e.substring(a-=c,a+c)),!((o+=c+1)>r));)c=t[f=(f+1)%t.length];return i.reverse().join(n)}):vn,a=e.currency,i=e.decimal,f=e.numerals?function(e){return function(t){return t.replace(/[0-9]/g,function(t){return e[+t]})}}(e.numerals):vn,c=e.percent||"%";function o(e){var t=(e=hn(e)).fill,n=e.align,o=e.sign,u=e.symbol,s=e.zero,l=e.width,d=e.comma,h=e.precision,b=e.trim,p=e.type;"n"===p?(d=!0,p="g"):gn[p]||(null==h&&(h=12),b=!0,p="g"),(s||"0"===t&&"="===n)&&(s=!0,t="0",n="=");var g="$"===u?a[0]:"#"===u&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",v="$"===u?a[1]:/[%p]/.test(p)?c:"",m=gn[p],y=/[defgprs%]/.test(p);function w(e){var a,c,u,w=g,x=v;if("c"===p)x=m(e)+x,e="";else{var _=(e=+e)<0;if(e=m(Math.abs(e),h),b&&(e=function(e){e:for(var t,n=e.length,r=1,a=-1;r<n;++r)switch(e[r]){case".":a=t=r;break;case"0":0===a&&(a=r),t=r;break;default:if(a>0){if(!+e[r])break e;a=0}}return a>0?e.slice(0,a)+e.slice(t+1):e}(e)),_&&0==+e&&(_=!1),w=(_?"("===o?o:"-":"-"===o||"("===o?"":o)+w,x=("s"===p?xn[8+ln/3]:"")+x+(_&&"("===o?")":""),y)for(a=-1,c=e.length;++a<c;)if(48>(u=e.charCodeAt(a))||u>57){x=(46===u?i+e.slice(a+1):e.slice(a))+x,e=e.slice(0,a);break}}d&&!s&&(e=r(e,1/0));var M=w.length+e.length+x.length,A=M<l?new Array(l-M+1).join(t):"";switch(d&&s&&(e=r(A+e,A.length?l-x.length:1/0),A=""),n){case"<":e=w+e+x+A;break;case"=":e=w+A+e+x;break;case"^":e=A.slice(0,M=A.length>>1)+w+e+x+A.slice(M);break;default:e=A+w+e+x}return f(e)}return h=null==h?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,h)):Math.max(0,Math.min(20,h)),w.toString=function(){return e+""},w}return{format:o,formatPrefix:function(e,t){var n=o(((e=hn(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(sn(t)/3))),a=Math.pow(10,-r),i=xn[8+r/3];return function(e){return n(a*e)+i}}}}function Mn(e,t,n){var r,a=e[0],i=e[e.length-1],f=function(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=se?a*=10:i>=le?a*=5:i>=de&&(a*=2),t<e?-a:a}(a,i,null==t?10:t);switch((n=hn(null==n?",f":n)).type){case"s":var c=Math.max(Math.abs(a),Math.abs(i));return null!=n.precision||isNaN(r=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(sn(t)/3)))-sn(Math.abs(e)))}(f,c))||(n.precision=r),wn(n,c);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,sn(t)-sn(e))+1}(f,Math.max(Math.abs(a),Math.abs(i))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(e){return Math.max(0,-sn(Math.abs(e)))}(f))||(n.precision=r-2*("%"===n.type))}return yn(n)}function An(e){var t=e.domain;return e.ticks=function(e){var n=t();return function(e,t,n){var r,a,i,f,c=-1;if(n=+n,(e=+e)==(t=+t)&&n>0)return[e];if((r=t<e)&&(a=e,e=t,t=a),0===(f=he(e,t,n))||!isFinite(f))return[];if(f>0)for(e=Math.ceil(e/f),t=Math.floor(t/f),i=new Array(a=Math.ceil(t-e+1));++c<a;)i[c]=(e+c)*f;else for(e=Math.floor(e*f),t=Math.ceil(t*f),i=new Array(a=Math.ceil(e-t+1));++c<a;)i[c]=(e-c)/f;return r&&i.reverse(),i}(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){return Mn(t(),e,n)},e.nice=function(n){null==n&&(n=10);var r,a=t(),i=0,f=a.length-1,c=a[i],o=a[f];return o<c&&(r=c,c=o,o=r,r=i,i=f,f=r),(r=he(c,o,n))>0?r=he(c=Math.floor(c/r)*r,o=Math.ceil(o/r)*r,n):r<0&&(r=he(c=Math.ceil(c*r)/r,o=Math.floor(o*r)/r,n)),r>0?(a[i]=Math.floor(c/r)*r,a[f]=Math.ceil(o/r)*r,t(a)):r<0&&(a[i]=Math.ceil(c*r)/r,a[f]=Math.floor(o*r)/r,t(a)),e},e}function Tn(){var e=function(e,t){var n,r,a,i=an,f=an,c=Ht,o=!1;function u(){return n=Math.min(i.length,f.length)>2?on:cn,r=a=null,s}function s(t){return(r||(r=n(i,f,o?function(e){return function(t,n){var r=e(t=+t,n=+n);return function(e){return e<=t?0:e>=n?1:r(e)}}}(e):e,c)))(+t)}return s.invert=function(e){return(a||(a=n(f,i,fn,o?function(e){return function(t,n){var r=e(t=+t,n=+n);return function(e){return e<=0?t:e>=1?n:r(e)}}}(t):t)))(+e)},s.domain=function(e){return arguments.length?(i=De.call(e,rn),u()):i.slice()},s.range=function(e){return arguments.length?(f=Ie.call(e),u()):f.slice()},s.rangeRound=function(e){return f=Ie.call(e),c=Ot,u()},s.clamp=function(e){return arguments.length?(o=!!e,u()):o},s.interpolate=function(e){return arguments.length?(c=e,u()):c},u()}(fn,Gt);return e.copy=function(){return t=e,Tn().domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp());var t},An(e)}mn=_n({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),yn=mn.format,wn=mn.formatPrefix;var Sn=new Date,kn=new Date;function En(e,t,n,r){function a(t){return e(t=new Date(+t)),t}return a.floor=a,a.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},a.round=function(e){var t=a(e),n=a.ceil(e);return e-t<n-e?t:n},a.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},a.range=function(n,r,i){var f,c=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return c;do{c.push(f=new Date(+n)),t(n,i),e(n)}while(f<n&&n<r);return c},a.filter=function(n){return En(function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)},function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););})},n&&(a.count=function(t,r){return Sn.setTime(+t),kn.setTime(+r),e(Sn),e(kn),Math.floor(n(Sn,kn))},a.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?a.filter(r?function(t){return r(t)%e==0}:function(t){return a.count(0,t)%e==0}):a:null}),a}var Nn=En(function(){},function(e,t){e.setTime(+e+t)},function(e,t){return t-e});Nn.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?En(function(t){t.setTime(Math.floor(t/e)*e)},function(t,n){t.setTime(+t+n*e)},function(t,n){return(n-t)/e}):Nn:null};var Cn=6e4,Dn=6048e5,In=(En(function(e){e.setTime(1e3*Math.floor(e/1e3))},function(e,t){e.setTime(+e+1e3*t)},function(e,t){return(t-e)/1e3},function(e){return e.getUTCSeconds()}),En(function(e){e.setTime(Math.floor(e/Cn)*Cn)},function(e,t){e.setTime(+e+t*Cn)},function(e,t){return(t-e)/Cn},function(e){return e.getMinutes()}),En(function(e){var t=e.getTimezoneOffset()*Cn%36e5;t<0&&(t+=36e5),e.setTime(36e5*Math.floor((+e-t)/36e5)+t)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getHours()}),En(function(e){e.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Cn)/864e5},function(e){return e.getDate()-1}));function Pn(e){return En(function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)},function(e,t){e.setDate(e.getDate()+7*t)},function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Cn)/Dn})}var $n=Pn(0),zn=Pn(1),Un=(Pn(2),Pn(3),Pn(4)),Fn=(Pn(5),Pn(6),En(function(e){e.setDate(1),e.setHours(0,0,0,0)},function(e,t){e.setMonth(e.getMonth()+t)},function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())},function(e){return e.getMonth()}),En(function(e){e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t)},function(e,t){return t.getFullYear()-e.getFullYear()},function(e){return e.getFullYear()}));Fn.every=function(e){return isFinite(e=Math.floor(e))&&e>0?En(function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n*e)}):null};En(function(e){e.setUTCSeconds(0,0)},function(e,t){e.setTime(+e+t*Cn)},function(e,t){return(t-e)/Cn},function(e){return e.getUTCMinutes()}),En(function(e){e.setUTCMinutes(0,0,0)},function(e,t){e.setTime(+e+36e5*t)},function(e,t){return(t-e)/36e5},function(e){return e.getUTCHours()});var Yn=En(function(e){e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+t)},function(e,t){return(t-e)/864e5},function(e){return e.getUTCDate()-1});function Gn(e){return En(function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)},function(e,t){e.setUTCDate(e.getUTCDate()+7*t)},function(e,t){return(t-e)/Dn})}var Ln=Gn(0),Vn=Gn(1),Rn=(Gn(2),Gn(3),Gn(4)),Hn=(Gn(5),Gn(6),En(function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCMonth(e.getUTCMonth()+t)},function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())},function(e){return e.getUTCMonth()}),En(function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)},function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()},function(e){return e.getUTCFullYear()}));function On(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function jn(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function qn(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}Hn.every=function(e){return isFinite(e=Math.floor(e))&&e>0?En(function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)}):null};var Xn,Bn,Zn,Wn={"-":"",_:" ",0:"0"},Kn=/^\s*\d+/,Qn=/^%/,Jn=/[\\^$*+?|[\]().{}]/g;function er(e,t,n){var r=e<0?"-":"",a=(r?-e:e)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(t)+a:a)}function tr(e){return e.replace(Jn,"\\$&")}function nr(e){return new RegExp("^(?:"+e.map(tr).join("|")+")","i")}function rr(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function ar(e,t,n){var r=Kn.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function ir(e,t,n){var r=Kn.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function fr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function cr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function or(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function ur(e,t,n){var r=Kn.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function sr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function lr(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function dr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function hr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function br(e,t,n){var r=Kn.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function pr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function gr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function vr(e,t,n){var r=Kn.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function mr(e,t,n){var r=Kn.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function yr(e,t,n){var r=Kn.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function wr(e,t,n){var r=Qn.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function xr(e,t,n){var r=Kn.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function _r(e,t,n){var r=Kn.exec(t.slice(n));return r?(e.Q=1e3*+r[0],n+r[0].length):-1}function Mr(e,t){return er(e.getDate(),t,2)}function Ar(e,t){return er(e.getHours(),t,2)}function Tr(e,t){return er(e.getHours()%12||12,t,2)}function Sr(e,t){return er(1+In.count(Fn(e),e),t,3)}function kr(e,t){return er(e.getMilliseconds(),t,3)}function Er(e,t){return kr(e,t)+"000"}function Nr(e,t){return er(e.getMonth()+1,t,2)}function Cr(e,t){return er(e.getMinutes(),t,2)}function Dr(e,t){return er(e.getSeconds(),t,2)}function Ir(e){var t=e.getDay();return 0===t?7:t}function Pr(e,t){return er($n.count(Fn(e),e),t,2)}function $r(e,t){var n=e.getDay();return e=n>=4||0===n?Un(e):Un.ceil(e),er(Un.count(Fn(e),e)+(4===Fn(e).getDay()),t,2)}function zr(e){return e.getDay()}function Ur(e,t){return er(zn.count(Fn(e),e),t,2)}function Fr(e,t){return er(e.getFullYear()%100,t,2)}function Yr(e,t){return er(e.getFullYear()%1e4,t,4)}function Gr(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+er(t/60|0,"0",2)+er(t%60,"0",2)}function Lr(e,t){return er(e.getUTCDate(),t,2)}function Vr(e,t){return er(e.getUTCHours(),t,2)}function Rr(e,t){return er(e.getUTCHours()%12||12,t,2)}function Hr(e,t){return er(1+Yn.count(Hn(e),e),t,3)}function Or(e,t){return er(e.getUTCMilliseconds(),t,3)}function jr(e,t){return Or(e,t)+"000"}function qr(e,t){return er(e.getUTCMonth()+1,t,2)}function Xr(e,t){return er(e.getUTCMinutes(),t,2)}function Br(e,t){return er(e.getUTCSeconds(),t,2)}function Zr(e){var t=e.getUTCDay();return 0===t?7:t}function Wr(e,t){return er(Ln.count(Hn(e),e),t,2)}function Kr(e,t){var n=e.getUTCDay();return e=n>=4||0===n?Rn(e):Rn.ceil(e),er(Rn.count(Hn(e),e)+(4===Hn(e).getUTCDay()),t,2)}function Qr(e){return e.getUTCDay()}function Jr(e,t){return er(Vn.count(Hn(e),e),t,2)}function ea(e,t){return er(e.getUTCFullYear()%100,t,2)}function ta(e,t){return er(e.getUTCFullYear()%1e4,t,4)}function na(){return"+0000"}function ra(){return"%"}function aa(e){return+e}function ia(e){return Math.floor(+e/1e3)}!function(e){Xn=function(e){var t=e.dateTime,n=e.date,r=e.time,a=e.periods,i=e.days,f=e.shortDays,c=e.months,o=e.shortMonths,u=nr(a),s=rr(a),l=nr(i),d=rr(i),h=nr(f),b=rr(f),p=nr(c),g=rr(c),v=nr(o),m=rr(o),y={a:function(e){return f[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return o[e.getMonth()]},B:function(e){return c[e.getMonth()]},c:null,d:Mr,e:Mr,f:Er,H:Ar,I:Tr,j:Sr,L:kr,m:Nr,M:Cr,p:function(e){return a[+(e.getHours()>=12)]},Q:aa,s:ia,S:Dr,u:Ir,U:Pr,V:$r,w:zr,W:Ur,x:null,X:null,y:Fr,Y:Yr,Z:Gr,"%":ra},w={a:function(e){return f[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return o[e.getUTCMonth()]},B:function(e){return c[e.getUTCMonth()]},c:null,d:Lr,e:Lr,f:jr,H:Vr,I:Rr,j:Hr,L:Or,m:qr,M:Xr,p:function(e){return a[+(e.getUTCHours()>=12)]},Q:aa,s:ia,S:Br,u:Zr,U:Wr,V:Kr,w:Qr,W:Jr,x:null,X:null,y:ea,Y:ta,Z:na,"%":ra},x={a:function(e,t,n){var r=h.exec(t.slice(n));return r?(e.w=b[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=l.exec(t.slice(n));return r?(e.w=d[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=v.exec(t.slice(n));return r?(e.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=p.exec(t.slice(n));return r?(e.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return A(e,t,n,r)},d:hr,e:hr,f:yr,H:pr,I:pr,j:br,L:mr,m:dr,M:gr,p:function(e,t,n){var r=u.exec(t.slice(n));return r?(e.p=s[r[0].toLowerCase()],n+r[0].length):-1},Q:xr,s:_r,S:vr,u:ir,U:fr,V:cr,w:ar,W:or,x:function(e,t,r){return A(e,n,t,r)},X:function(e,t,n){return A(e,r,t,n)},y:sr,Y:ur,Z:lr,"%":wr};function _(e,t){return function(n){var r,a,i,f=[],c=-1,o=0,u=e.length;for(n instanceof Date||(n=new Date(+n));++c<u;)37===e.charCodeAt(c)&&(f.push(e.slice(o,c)),null!=(a=Wn[r=e.charAt(++c)])?r=e.charAt(++c):a="e"===r?" ":"0",(i=t[r])&&(r=i(n,a)),f.push(r),o=c+1);return f.push(e.slice(o,c)),f.join("")}}function M(e,t){return function(n){var r,a,i=qn(1900);if(A(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(r=(a=(r=jn(qn(i.y))).getUTCDay())>4||0===a?Vn.ceil(r):Vn(r),r=Yn.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(r=(a=(r=t(qn(i.y))).getDay())>4||0===a?zn.ceil(r):zn(r),r=In.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?jn(qn(i.y)).getUTCDay():t(qn(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,jn(i)):t(i)}}function A(e,t,n,r){for(var a,i,f=0,c=t.length,o=n.length;f<c;){if(r>=o)return-1;if(37===(a=t.charCodeAt(f++))){if(a=t.charAt(f++),!(i=x[a in Wn?t.charAt(f++):a])||(r=i(e,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return y.x=_(n,y),y.X=_(r,y),y.c=_(t,y),w.x=_(n,w),w.X=_(r,w),w.c=_(t,w),{format:function(e){var t=_(e+="",y);return t.toString=function(){return e},t},parse:function(e){var t=M(e+="",On);return t.toString=function(){return e},t},utcFormat:function(e){var t=_(e+="",w);return t.toString=function(){return e},t},utcParse:function(e){var t=M(e,jn);return t.toString=function(){return e},t}}}(e),Xn.format,Xn.parse,Bn=Xn.utcFormat,Zn=Xn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Bn("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Zn("%Y-%m-%dT%H:%M:%S.%LZ");var fa={value:function(){}};function ca(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r)throw new Error("illegal type: "+e);r[e]=[]}return new oa(r)}function oa(e){this._=e}function ua(e,t){for(var n,r=0,a=e.length;r<a;++r)if((n=e[r]).name===t)return n.value}function sa(e,t,n){for(var r=0,a=e.length;r<a;++r)if(e[r].name===t){e[r]=fa,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}oa.prototype=ca.prototype={constructor:oa,on:function(e,t){var n,r,a=this._,i=(r=a,(e+"").trim().split(/^|\s+/).map(function(e){var t="",n=e.indexOf(".");if(n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),e&&!r.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:t}})),f=-1,c=i.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++f<c;)if(n=(e=i[f]).type)a[n]=sa(a[n],e.name,t);else if(null==t)for(n in a)a[n]=sa(a[n],e.name,null);return this}for(;++f<c;)if((n=(e=i[f]).type)&&(n=ua(a[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new oa(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(r=this._[e]).length;i<n;++i)r[i].value.apply(t,a)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],a=0,i=r.length;a<i;++a)r[a].value.apply(t,n)}};var la,da,ha=0,ba=0,pa=0,ga=1e3,va=0,ma=0,ya=0,wa="object"==typeof performance&&performance.now?performance:Date,xa="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function _a(){return ma||(xa(Ma),ma=wa.now()+ya)}function Ma(){ma=0}function Aa(){this._call=this._time=this._next=null}function Ta(e,t,n){var r=new Aa;return r.restart(e,t,n),r}function Sa(){ma=(va=wa.now())+ya,ha=ba=0;try{!function(){_a(),++ha;for(var e,t=la;t;)(e=ma-t._time)>=0&&t._call.call(null,e),t=t._next;--ha}()}finally{ha=0,function(){var e,t,n=la,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:la=t);da=e,Ea(r)}(),ma=0}}function ka(){var e=wa.now(),t=e-va;t>ga&&(ya-=t,va=e)}function Ea(e){ha||(ba&&(ba=clearTimeout(ba)),e-ma>24?(e<1/0&&(ba=setTimeout(Sa,e-wa.now()-ya)),pa&&(pa=clearInterval(pa))):(pa||(va=wa.now(),pa=setInterval(ka,ga)),ha=1,xa(Sa)))}function Na(e,t,n){var r=new Aa;return t=null==t?0:+t,r.restart(function(n){r.stop(),e(n+t)},t,n),r}Aa.prototype=Ta.prototype={constructor:Aa,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?_a():+n)+(null==t?0:+t),this._next||da===this||(da?da._next=this:la=this,da=this),this._call=e,this._time=n,Ea()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ea())}};var Ca=ca("start","end","interrupt"),Da=[],Ia=0,Pa=1,$a=2,za=3,Ua=4,Fa=5,Ya=6;function Ga(e,t,n,r,a,i){var f=e.__transition;if(f){if(n in f)return}else e.__transition={};!function(e,t,n){var r,a=e.__transition;function i(o){var u,s,l,d;if(n.state!==Pa)return c();for(u in a)if((d=a[u]).name===n.name){if(d.state===za)return Na(i);d.state===Ua?(d.state=Ya,d.timer.stop(),d.on.call("interrupt",e,e.__data__,d.index,d.group),delete a[u]):+u<t&&(d.state=Ya,d.timer.stop(),delete a[u])}if(Na(function(){n.state===za&&(n.state=Ua,n.timer.restart(f,n.delay,n.time),f(o))}),n.state=$a,n.on.call("start",e,e.__data__,n.index,n.group),n.state===$a){for(n.state=za,r=new Array(l=n.tween.length),u=0,s=-1;u<l;++u)(d=n.tween[u].value.call(e,e.__data__,n.index,n.group))&&(r[++s]=d);r.length=s+1}}function f(t){for(var a=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(c),n.state=Fa,1),i=-1,f=r.length;++i<f;)r[i].call(null,a);n.state===Fa&&(n.on.call("end",e,e.__data__,n.index,n.group),c())}function c(){for(var r in n.state=Ya,n.timer.stop(),delete a[t],a)return;delete e.__transition}a[t]=n,n.timer=Ta(function(e){n.state=Pa,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)},0,n.time)}(e,n,{name:t,index:r,group:a,on:Ca,tween:Da,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:Ia})}function La(e,t){var n=Ra(e,t);if(n.state>Ia)throw new Error("too late; already scheduled");return n}function Va(e,t){var n=Ra(e,t);if(n.state>$a)throw new Error("too late; already started");return n}function Ra(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}function Ha(e,t){var n,r,a,i=e.__transition,f=!0;if(i){for(a in t=null==t?null:t+"",i)(n=i[a]).name===t?(r=n.state>$a&&n.state<Fa,n.state=Ya,n.timer.stop(),r&&n.on.call("interrupt",e,e.__data__,n.index,n.group),delete i[a]):f=!1;f&&delete e.__transition}}function Oa(e,t,n){var r=e._id;return e.each(function(){var e=Va(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)}),function(e){return Ra(e,r).value[t]}}function ja(e,t){var n;return("number"==typeof t?Gt:t instanceof We?Ut:(n=We(t))?(t=n,Ut):Rt)(e,t)}var qa=Q.prototype.constructor;var Xa=0;function Ba(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function Za(){return++Xa}var Wa=Q.prototype;Ba.prototype=function(e){return Q().transition(e)}.prototype={constructor:Ba,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=b(e));for(var r=this._groups,a=r.length,i=new Array(a),f=0;f<a;++f)for(var c,o,u=r[f],s=u.length,l=i[f]=new Array(s),d=0;d<s;++d)(c=u[d])&&(o=e.call(c,c.__data__,d,u))&&("__data__"in c&&(o.__data__=c.__data__),l[d]=o,Ga(l[d],t,n,d,l,Ra(c,n)));return new Ba(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=g(e));for(var r=this._groups,a=r.length,i=[],f=[],c=0;c<a;++c)for(var o,u=r[c],s=u.length,l=0;l<s;++l)if(o=u[l]){for(var d,h=e.call(o,o.__data__,l,u),b=Ra(o,n),p=0,v=h.length;p<v;++p)(d=h[p])&&Ga(d,t,n,p,h,b);i.push(h),f.push(o)}return new Ba(i,f,t,n)},filter:function(e){"function"!=typeof e&&(e=w(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,f=t[a],c=f.length,o=r[a]=[],u=0;u<c;++u)(i=f[u])&&e.call(i,i.__data__,u,f)&&o.push(i);return new Ba(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,a=n.length,i=Math.min(r,a),f=new Array(r),c=0;c<i;++c)for(var o,u=t[c],s=n[c],l=u.length,d=f[c]=new Array(l),h=0;h<l;++h)(o=u[h]||s[h])&&(d[h]=o);for(;c<r;++c)f[c]=t[c];return new Ba(f,this._parents,this._name,this._id)},selection:function(){return new qa(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=Za(),r=this._groups,a=r.length,i=0;i<a;++i)for(var f,c=r[i],o=c.length,u=0;u<o;++u)if(f=c[u]){var s=Ra(f,t);Ga(f,e,n,u,c,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Ba(r,this._parents,e,n)},call:Wa.call,nodes:Wa.nodes,node:Wa.node,size:Wa.size,empty:Wa.empty,each:Wa.each,on:function(e,t){var n=this._id;return arguments.length<2?Ra(this.node(),n).on.on(e):this.each(function(e,t,n){var r,a,i=function(e){return(e+"").trim().split(/^|\s+/).every(function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e})}(t)?La:Va;return function(){var f=i(this,e),c=f.on;c!==r&&(a=(r=c).copy()).on(t,n),f.on=a}}(n,e,t))},attr:function(e,t){var n=l(e),r="transform"===n?en:ja;return this.attrTween(e,"function"==typeof t?(n.local?function(e,t,n){var r,a,i;return function(){var f,c=n(this);if(null!=c)return(f=this.getAttributeNS(e.space,e.local))===c?null:f===r&&c===a?i:i=t(r=f,a=c);this.removeAttributeNS(e.space,e.local)}}:function(e,t,n){var r,a,i;return function(){var f,c=n(this);if(null!=c)return(f=this.getAttribute(e))===c?null:f===r&&c===a?i:i=t(r=f,a=c);this.removeAttribute(e)}})(n,r,Oa(this,"attr."+e,t)):null==t?(n.local?function(e){return function(){this.removeAttributeNS(e.space,e.local)}}:function(e){return function(){this.removeAttribute(e)}})(n):(n.local?function(e,t,n){var r,a;return function(){var i=this.getAttributeNS(e.space,e.local);return i===n?null:i===r?a:a=t(r=i,n)}}:function(e,t,n){var r,a;return function(){var i=this.getAttribute(e);return i===n?null:i===r?a:a=t(r=i,n)}})(n,r,t+""))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=l(e);return this.tween(n,(r.local?function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttributeNS(e.space,e.local,r(t))}}return n._value=t,n}:function(e,t){function n(){var n=this,r=t.apply(n,arguments);return r&&function(t){n.setAttribute(e,r(t))}}return n._value=t,n})(r,t))},style:function(e,t,n){var r="transform"==(e+="")?Jt:ja;return null==t?this.styleTween(e,function(e,t){var n,r,a;return function(){var i=E(this,e),f=(this.style.removeProperty(e),E(this,e));return i===f?null:i===n&&f===r?a:a=t(n=i,r=f)}}(e,r)).on("end.style."+e,function(e){return function(){this.style.removeProperty(e)}}(e)):this.styleTween(e,"function"==typeof t?function(e,t,n){var r,a,i;return function(){var f=E(this,e),c=n(this);return null==c&&(this.style.removeProperty(e),c=E(this,e)),f===c?null:f===r&&c===a?i:i=t(r=f,a=c)}}(e,r,Oa(this,"style."+e,t)):function(e,t,n){var r,a;return function(){var i=E(this,e);return i===n?null:i===r?a:a=t(r=i,n)}}(e,r,t+""),n)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,function(e,t,n){function r(){var r=this,a=t.apply(r,arguments);return a&&function(t){r.style.setProperty(e,a(t),n)}}return r._value=t,r}(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Oa(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,a=Ra(this.node(),n).tween,i=0,f=a.length;i<f;++i)if((r=a[i]).name===e)return r.value;return null}return this.each((null==t?function(e,t){var n,r;return function(){var a=Va(this,e),i=a.tween;if(i!==n)for(var f=0,c=(r=n=i).length;f<c;++f)if(r[f].name===t){(r=r.slice()).splice(f,1);break}a.tween=r}}:function(e,t,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=Va(this,e),f=i.tween;if(f!==r){a=(r=f).slice();for(var c={name:t,value:n},o=0,u=a.length;o<u;++o)if(a[o].name===t){a[o]=c;break}o===u&&a.push(c)}i.tween=a}})(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){La(this,e).delay=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){La(this,e).delay=t}})(t,e)):Ra(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?function(e,t){return function(){Va(this,e).duration=+t.apply(this,arguments)}}:function(e,t){return t=+t,function(){Va(this,e).duration=t}})(t,e)):Ra(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if("function"!=typeof t)throw new Error;return function(){Va(this,e).ease=t}}(t,e)):Ra(this.node(),t).ease}};Math.PI,Math.PI;var Ka={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function Qa(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Ka.time=_a(),Ka;return n}function Ja(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n}function ei(e){return Yt(e[e.length-1])}Q.prototype.interrupt=function(e){return this.each(function(){Ha(this,e)})},Q.prototype.transition=function(e){var t,n;e instanceof Ba?(t=e._id,e=e._name):(t=Za(),(n=Ka).time=_a(),e=null==e?null:e+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var f,c=r[i],o=c.length,u=0;u<o;++u)(f=c[u])&&Ga(f,e,t,u,c,n||Qa(f,t));return new Ba(r,this._parents,e,t)},Ja("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Ja("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Ja("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Ja("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Ja("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Ja("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Ja("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Ja("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Ja("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),ei(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Ja)),ei(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Ja)),ei(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Ja)),ei(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Ja)),ei(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Ja)),ei(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Ja)),ei(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Ja)),ei(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Ja)),ei(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Ja)),ei(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Ja)),ei(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Ja)),ei(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Ja)),ei(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Ja)),ei(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Ja)),ei(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Ja)),ei(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Ja)),ei(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Ja)),ei(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Ja)),ei(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Ja)),ei(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Ja)),ei(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Ja)),ei(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Ja)),ei(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Ja)),ei(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Ja)),ei(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Ja)),ei(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Ja)),ei(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Ja)),nn(Ct(300,.5,0),Ct(-240,.5,1));nn(Ct(-100,.75,.35),Ct(80,1.5,.8)),nn(Ct(260,.75,.35),Ct(80,1.5,.8)),Ct(),et(),Math.PI,Math.PI;function ti(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}ti(Ja("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));ti(Ja("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),ti(Ja("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),ti(Ja("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));class ni{constructor(e,t,n=!1){$(`#${e}`).show();const r=n?"btn-group-vertical btn-group-sm":"btn-group btn-group-sm";this.bar=$("<div/>").addClass(r).appendTo(`#${e}`),this.buttons={},this.tooltip=t}createDownloadSvgButton(e,t,n,r,a="fa-download"){this.createButton(e,a);J(`#${e}`).on("click",()=>{this.downloadSvg(t,n,r)}).on("mouseover",()=>{this.tooltip.show("Download")}).on("mouseout",()=>{this.tooltip.hide()})}createResetButton(e,t,n="fa-expand-arrows-alt"){this.createButton(e,n);J(`#${e}`).on("click",t).on("mouseover",()=>{this.tooltip.show("Reset the scales")}).on("mouseout",()=>{this.tooltip.hide()})}createButton(e,t="fa-download"){const n=$("<a/>").attr("id",e).addClass("btn btn-default").appendTo(this.bar);return $("<i/>").addClass(`fa ${t}`).appendTo(n),this.buttons[e]=n,n}attachTooltip(e){this.tooltip=e}downloadSvg(e,t,n){let r=$($($(`${"#"+e}`))[0]),a=r.clone().attr("version","1.1").attr("xmlns","http://www.w3.org/2000/svg"),i=function(e){for(var t="",n=document.styleSheets,r=0;r<n.length;r++)try{if(null==n[r].cssRules)continue;for(var a=n[r].cssRules,i=0;i<a.length;i++){var f=a[i];if(void 0!==f.style){var c,o=void 0===f.selectorText?f.selectorText:f.selectorText.replace(`#${e[0].id} `,"");try{c=$(e).find(o)}catch(e){c=[]}c.length>0&&(t+=f.selectorText+" { "+f.style.cssText+" }\n")}}}catch(e){if("SecurityError"!==e.name)throw e;continue}var u=document.createElement("style");return u.setAttribute("type","text/css"),u.innerHTML="<![CDATA[\n"+t+"\n]]>",u}(r.get());a.prepend(i),$("#"+n).html("").hide();let f=$(`#${n}`).append(a).html(),c=new Blob([f],{type:"image/svg+xml"});saveAs(c,t),$(`#${n}`).html("").hide()}}class ri{constructor(e,t=!1,n=30,r=-40,a=100){this.id=e,this.verbose=t,this.offsetX=n,this.offsetY=r,this.duration=a}show(e){this.verbose&&console.log(e),this.edit(e),this.move(),J("#"+this.id).style("display","inline").transition().duration(this.duration).style("opacity",1)}hide(){J("#"+this.id).transition().duration(this.duration).style("opacity",0),this.edit("")}move(e=O.pageX,t=O.pageY){this.verbose&&(console.log(e),console.log(t)),e+=this.offsetX,t=t+this.offsetY<0?10:t+this.offsetY;J("#"+this.id).style("left",`${e}px`).style("top",`${t}px`)}edit(e){J("#"+this.id).html(e)}}var ai=Array.prototype.slice;function ii(e){return e}var fi=1,ci=2,oi=3,ui=4,si=1e-6;function li(e){return"translate("+(e+.5)+",0)"}function di(e){return"translate(0,"+(e+.5)+")"}function hi(){return!this.__axis}function bi(e,t){var n=[],r=null,a=null,i=6,f=6,c=3,o=e===fi||e===ui?-1:1,u=e===ui||e===ci?"x":"y",s=e===fi||e===oi?li:di;function l(l){var d=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,h=null==a?t.tickFormat?t.tickFormat.apply(t,n):ii:a,b=Math.max(i,0)+c,p=t.range(),g=+p[0]+.5,v=+p[p.length-1]+.5,m=(t.bandwidth?function(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}:function(e){return function(t){return+e(t)}})(t.copy()),y=l.selection?l.selection():l,w=y.selectAll(".domain").data([null]),x=y.selectAll(".tick").data(d,t).order(),_=x.exit(),M=x.enter().append("g").attr("class","tick"),A=x.select("line"),T=x.select("text");w=w.merge(w.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),x=x.merge(M),A=A.merge(M.append("line").attr("stroke","#000").attr(u+"2",o*i)),T=T.merge(M.append("text").attr("fill","#000").attr(u,o*b).attr("dy",e===fi?"0em":e===oi?"0.71em":"0.32em")),l!==y&&(w=w.transition(l),x=x.transition(l),A=A.transition(l),T=T.transition(l),_=_.transition(l).attr("opacity",si).attr("transform",function(e){return isFinite(e=m(e))?s(e):this.getAttribute("transform")}),M.attr("opacity",si).attr("transform",function(e){var t=this.parentNode.__axis;return s(t&&isFinite(t=t(e))?t:m(e))})),_.remove(),w.attr("d",e===ui||e==ci?"M"+o*f+","+g+"H0.5V"+v+"H"+o*f:"M"+g+","+o*f+"V0.5H"+v+"V"+o*f),x.attr("opacity",1).attr("transform",function(e){return s(m(e))}),A.attr(u+"2",o*i),T.attr(u,o*b).text(h),y.filter(hi).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",e===ci?"start":e===ui?"end":"middle"),y.each(function(){this.__axis=m})}return l.scale=function(e){return arguments.length?(t=e,l):t},l.ticks=function(){return n=ai.call(arguments),l},l.tickArguments=function(e){return arguments.length?(n=null==e?[]:ai.call(e),l):n.slice()},l.tickValues=function(e){return arguments.length?(r=null==e?null:ai.call(e),l):r&&r.slice()},l.tickFormat=function(e){return arguments.length?(a=e,l):a},l.tickSize=function(e){return arguments.length?(i=f=+e,l):i},l.tickSizeInner=function(e){return arguments.length?(i=+e,l):i},l.tickSizeOuter=function(e){return arguments.length?(f=+e,l):f},l.tickPadding=function(e){return arguments.length?(c=+e,l):c},l}function pi(e){return bi(oi,e)}var gi=Math.PI,vi=2*gi,mi=vi-1e-6;function yi(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function wi(){return new yi}function xi(e){return function(){return e}}yi.prototype=wi.prototype={constructor:yi,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,a,i){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(e,t,n,r,a){e=+e,t=+t,n=+n,r=+r,a=+a;var i=this._x1,f=this._y1,c=n-e,o=r-t,u=i-e,s=f-t,l=u*u+s*s;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(l>1e-6)if(Math.abs(s*c-o*u)>1e-6&&a){var d=n-i,h=r-f,b=c*c+o*o,p=d*d+h*h,g=Math.sqrt(b),v=Math.sqrt(l),m=a*Math.tan((gi-Math.acos((b+l-p)/(2*g*v)))/2),y=m/v,w=m/g;Math.abs(y-1)>1e-6&&(this._+="L"+(e+y*u)+","+(t+y*s)),this._+="A"+a+","+a+",0,0,"+ +(s*d>u*h)+","+(this._x1=e+w*c)+","+(this._y1=t+w*o)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,a,i){e=+e,t=+t;var f=(n=+n)*Math.cos(r),c=n*Math.sin(r),o=e+f,u=t+c,s=1^i,l=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+o+","+u:(Math.abs(this._x1-o)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+o+","+u),n&&(l<0&&(l=l%vi+vi),l>mi?this._+="A"+n+","+n+",0,1,"+s+","+(e-f)+","+(t-c)+"A"+n+","+n+",0,1,"+s+","+(this._x1=o)+","+(this._y1=u):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=gi)+","+s+","+(this._x1=e+n*Math.cos(a))+","+(this._y1=t+n*Math.sin(a))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};Math.PI;function _i(e){this._context=e}function Mi(e){return new _i(e)}function Ai(e){return e[0]}function Ti(e){return e[1]}function Si(){var e=Ai,t=null,n=xi(0),r=Ti,a=xi(!0),i=null,f=Mi,c=null;function o(o){var u,s,l,d,h,b=o.length,p=!1,g=new Array(b),v=new Array(b);for(null==i&&(c=f(h=wi())),u=0;u<=b;++u){if(!(u<b&&a(d=o[u],u,o))===p)if(p=!p)s=u,c.areaStart(),c.lineStart();else{for(c.lineEnd(),c.lineStart(),l=u-1;l>=s;--l)c.point(g[l],v[l]);c.lineEnd(),c.areaEnd()}p&&(g[u]=+e(d,u,o),v[u]=+n(d,u,o),c.point(t?+t(d,u,o):g[u],r?+r(d,u,o):v[u]))}if(h)return c=null,h+""||null}function u(){return function(){var e=Ai,t=Ti,n=xi(!0),r=null,a=Mi,i=null;function f(f){var c,o,u,s=f.length,l=!1;for(null==r&&(i=a(u=wi())),c=0;c<=s;++c)!(c<s&&n(o=f[c],c,f))===l&&((l=!l)?i.lineStart():i.lineEnd()),l&&i.point(+e(o,c,f),+t(o,c,f));if(u)return i=null,u+""||null}return f.x=function(t){return arguments.length?(e="function"==typeof t?t:xi(+t),f):e},f.y=function(e){return arguments.length?(t="function"==typeof e?e:xi(+e),f):t},f.defined=function(e){return arguments.length?(n="function"==typeof e?e:xi(!!e),f):n},f.curve=function(e){return arguments.length?(a=e,null!=r&&(i=a(r)),f):a},f.context=function(e){return arguments.length?(null==e?r=i=null:i=a(r=e),f):r},f}().defined(a).curve(f).context(i)}return o.x=function(n){return arguments.length?(e="function"==typeof n?n:xi(+n),t=null,o):e},o.x0=function(t){return arguments.length?(e="function"==typeof t?t:xi(+t),o):e},o.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:xi(+e),o):t},o.y=function(e){return arguments.length?(n="function"==typeof e?e:xi(+e),r=null,o):n},o.y0=function(e){return arguments.length?(n="function"==typeof e?e:xi(+e),o):n},o.y1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:xi(+e),o):r},o.lineX0=o.lineY0=function(){return u().x(e).y(n)},o.lineY1=function(){return u().x(e).y(r)},o.lineX1=function(){return u().x(t).y(n)},o.defined=function(e){return arguments.length?(a="function"==typeof e?e:xi(!!e),o):a},o.curve=function(e){return arguments.length?(f=e,null!=i&&(c=f(i)),o):f},o.context=function(e){return arguments.length?(null==e?i=c=null:c=f(i=e),o):i},o}function ki(e){return e<0?-1:1}function Ei(e,t,n){var r=e._x1-e._x0,a=t-e._x1,i=(e._y1-e._y0)/(r||a<0&&-0),f=(n-e._y1)/(a||r<0&&-0),c=(i*a+f*r)/(r+a);return(ki(i)+ki(f))*Math.min(Math.abs(i),Math.abs(f),.5*Math.abs(c))||0}function Ni(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function Ci(e,t,n){var r=e._x0,a=e._y0,i=e._x1,f=e._y1,c=(i-r)/3;e._context.bezierCurveTo(r+c,a+c*t,i-c,f-c*n,i,f)}function Di(e){this._context=e}function Ii(e){this._context=e}function Pi(){O.preventDefault(),O.stopImmediatePropagation()}function $i(e){return function(){return e}}function zi(){O.stopImmediatePropagation()}function Ui(){O.preventDefault(),O.stopImmediatePropagation()}_i.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}},Di.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Ci(this,this._t0,Ni(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,Ci(this,Ni(this,n=Ei(this,e,t)),n);break;default:Ci(this,this._t0,n=Ei(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(function(e){this._context=new Ii(e)}.prototype=Object.create(Di.prototype)).point=function(e,t){Di.prototype.point.call(this,t,e)},Ii.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,a,i){this._context.bezierCurveTo(t,e,r,n,i,a)}};var Fi={name:"drag"},Yi={name:"space"},Gi={name:"handle"},Li={name:"center"},Vi={name:"x",handles:["e","w"].map(Zi),input:function(e,t){return e&&[[e[0],t[0][1]],[e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},Ri={name:"y",handles:["n","s"].map(Zi),input:function(e,t){return e&&[[t[0][0],e[0]],[t[1][0],e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},Hi={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Zi),input:function(e){return e},output:function(e){return e}},Oi={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},ji={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},qi={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Xi={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Bi={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function Zi(e){return{type:e}}function Wi(){return!O.button}function Ki(){var e=this.ownerSVGElement||this;return[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function Qi(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function Ji(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}function ef(){return function(e){var t,n=Ki,r=Wi,a=ca(f,"start","brush","end"),i=6;function f(t){var n=t.property("__brush",l).selectAll(".overlay").data([Zi("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Oi.overlay).merge(n).each(function(){var e=Qi(this).extent;J(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])}),t.selectAll(".selection").data([Zi("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Oi.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,function(e){return e.type});r.exit().remove(),r.enter().append("rect").attr("class",function(e){return"handle handle--"+e.type}).attr("cursor",function(e){return Oi[e.type]}),t.each(c).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function c(){var e=J(this),t=Qi(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",function(e){return"e"===e.type[e.type.length-1]?t[1][0]-i/2:t[0][0]-i/2}).attr("y",function(e){return"s"===e.type[0]?t[1][1]-i/2:t[0][1]-i/2}).attr("width",function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+i:i}).attr("height",function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+i:i})):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function o(e,t){return e.__brush.emitter||new u(e,t)}function u(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function s(){if(O.touches){if(O.changedTouches.length<O.touches.length)return Ui()}else if(t)return;if(r.apply(this,arguments)){var n,a,i,f,u,s,l,d,h,b,p,g,v,m=this,y=O.target.__data__.type,w="selection"===(O.metaKey?y="overlay":y)?Fi:O.altKey?Li:Gi,x=e===Ri?null:Xi[y],_=e===Vi?null:Bi[y],M=Qi(m),A=M.extent,T=M.selection,S=A[0][0],k=A[0][1],E=A[1][0],N=A[1][1],C=x&&_&&O.shiftKey,D=te(m),I=D,P=o(m,arguments).beforestart();"overlay"===y?M.selection=T=[[n=e===Ri?S:D[0],i=e===Vi?k:D[1]],[u=e===Ri?E:n,l=e===Vi?N:i]]:(n=T[0][0],i=T[0][1],u=T[1][0],l=T[1][1]),a=n,f=i,s=u,d=l;var $=J(m).attr("pointer-events","none"),z=$.selectAll(".overlay").attr("cursor",Oi[y]);if(O.touches)$.on("touchmove.brush",F,!0).on("touchend.brush touchcancel.brush",G,!0);else{var U=J(O.view).on("keydown.brush",function(){switch(O.keyCode){case 16:C=x&&_;break;case 18:w===Gi&&(x&&(u=s-h*x,n=a+h*x),_&&(l=d-b*_,i=f+b*_),w=Li,Y());break;case 32:w!==Gi&&w!==Li||(x<0?u=s-h:x>0&&(n=a-h),_<0?l=d-b:_>0&&(i=f-b),w=Yi,z.attr("cursor",Oi.selection),Y());break;default:return}Ui()},!0).on("keyup.brush",function(){switch(O.keyCode){case 16:C&&(g=v=C=!1,Y());break;case 18:w===Li&&(x<0?u=s:x>0&&(n=a),_<0?l=d:_>0&&(i=f),w=Gi,Y());break;case 32:w===Yi&&(O.altKey?(x&&(u=s-h*x,n=a+h*x),_&&(l=d-b*_,i=f+b*_),w=Li):(x<0?u=s:x>0&&(n=a),_<0?l=d:_>0&&(i=f),w=Gi),z.attr("cursor",Oi[y]),Y());break;default:return}Ui()},!0).on("mousemove.brush",F,!0).on("mouseup.brush",G,!0);!function(e){var t=e.document.documentElement,n=J(e).on("dragstart.drag",Pi,!0);"onselectstart"in t?n.on("selectstart.drag",Pi,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")}(O.view)}zi(),Ha(m),c.call(m),P.start()}function F(){var e=te(m);!C||g||v||(Math.abs(e[0]-I[0])>Math.abs(e[1]-I[1])?v=!0:g=!0),I=e,p=!0,Ui(),Y()}function Y(){var e;switch(h=I[0]-D[0],b=I[1]-D[1],w){case Yi:case Fi:x&&(h=Math.max(S-n,Math.min(E-u,h)),a=n+h,s=u+h),_&&(b=Math.max(k-i,Math.min(N-l,b)),f=i+b,d=l+b);break;case Gi:x<0?(h=Math.max(S-n,Math.min(E-n,h)),a=n+h,s=u):x>0&&(h=Math.max(S-u,Math.min(E-u,h)),a=n,s=u+h),_<0?(b=Math.max(k-i,Math.min(N-i,b)),f=i+b,d=l):_>0&&(b=Math.max(k-l,Math.min(N-l,b)),f=i,d=l+b);break;case Li:x&&(a=Math.max(S,Math.min(E,n-h*x)),s=Math.max(S,Math.min(E,u+h*x))),_&&(f=Math.max(k,Math.min(N,i-b*_)),d=Math.max(k,Math.min(N,l+b*_)))}s<a&&(x*=-1,e=n,n=u,u=e,e=a,a=s,s=e,y in ji&&z.attr("cursor",Oi[y=ji[y]])),d<f&&(_*=-1,e=i,i=l,l=e,e=f,f=d,d=e,y in qi&&z.attr("cursor",Oi[y=qi[y]])),M.selection&&(T=M.selection),g&&(a=T[0][0],s=T[1][0]),v&&(f=T[0][1],d=T[1][1]),T[0][0]===a&&T[0][1]===f&&T[1][0]===s&&T[1][1]===d||(M.selection=[[a,f],[s,d]],c.call(m),P.brush())}function G(){if(zi(),O.touches){if(O.touches.length)return;t&&clearTimeout(t),t=setTimeout(function(){t=null},500),$.on("touchmove.brush touchend.brush touchcancel.brush",null)}else!function(e,t){var n=e.document.documentElement,r=J(e).on("dragstart.drag",null);t&&(r.on("click.drag",Pi,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}(O.view,p),U.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);$.attr("pointer-events","all"),z.attr("cursor",Oi.overlay),M.selection&&(T=M.selection),Ji(T)&&(M.selection=null,c.call(m)),P.end()}}function l(){var t=this.__brush||{selection:null};return t.extent=n.apply(this,arguments),t.dim=e,t}return f.move=function(t,n){t.selection?t.on("start.brush",function(){o(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){o(this,arguments).end()}).tween("brush",function(){var t=this,r=t.__brush,a=o(t,arguments),i=r.selection,f=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),u=Ht(i,f);function s(e){r.selection=1===e&&Ji(f)?null:u(e),c.call(t),a.brush()}return i&&f?s:s(1)}):t.each(function(){var t=arguments,r=this.__brush,a=e.input("function"==typeof n?n.apply(this,t):n,r.extent),i=o(this,t).beforestart();Ha(this),r.selection=null==a||Ji(a)?null:a,c.call(this),i.start().brush().end()})},u.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){!function(e,t,n,r){var a=O;e.sourceEvent=O,O=e;try{t.apply(n,r)}finally{O=a}}(new function(e,t,n){this.target=e,this.type=t,this.selection=n}(f,t,e.output(this.state.selection)),a.apply,a,[t,this.that,this.args])}},f.extent=function(e){return arguments.length?(n="function"==typeof e?e:$i([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),f):n},f.filter=function(e){return arguments.length?(r="function"==typeof e?e:$i(!!e),f):r},f.handleSize=function(e){return arguments.length?(i=+e,f):i},f.on=function(){var e=a.on.apply(a,arguments);return e===a?f:e},f}(Hi)}const tf={epanechnikov:function(e){return Math.abs(e)<=1?.75*(1-e*e):0},gaussian:function(e){return 1/Math.sqrt(2*Math.PI)*Math.exp(-.5*e*e)}},nf={nrd:function(e){let t=(be(e,.75)-be(e,.25))/1.34;return 1.06*Math.min(ce(e),t)*Math.pow(e.length,-.2)}};function rf(e,t,n){return function(r){return t.map(t=>[t,function(e,t){var n,r=e.length,a=r,i=-1,f=0;if(null==t)for(;++i<r;)isNaN(n=fe(e[i]))?--a:f+=n;else for(;++i<r;)isNaN(n=fe(t(e[i],i,e)))?--a:f+=n;if(a)return f/a}(r,r=>e((t-r)/n))/n])}}class af{constructor(e,t={}){this._sanityCheck(e),this.data=e,this.groupInfo=t,this.toolbar=void 0,this.tooltip=void 0}render(e,t=500,n=357,r=.05,a,i=[-3,3],f="Y axis",c=!0,o=30,u=!0,s=0,l=!1,d=!1,h=!1,b=!1,p=!1,g=!1,v=0){if(this.reset=(()=>{e.selectAll("*").remove(),this.render(e,t,n,r,a,i,f,c,o,u,s,l,d,h,b,p,g)}),this.updateYScale=function(i,f){e.selectAll("*").remove(),void 0===f&&(f=[]),this.render(e,t,n,r,a,[],i,c,o,u,s,l,d,h,b,p,g)},this.updateXScale=function(a){void 0===a&&console.error("updateXScale called without new X domain"),e.selectAll("*").remove(),this.render(e,t,n,r,a,[],f,c,o,u,s,l,d,h,b,p,g)},void 0===i||0==i.length){let e=[];this.data.forEach(t=>e=e.concat(t.values)),i=oe(e)}this.groups=Me().key(e=>e.group).entries(this.data),this.scale={x:$e().rangeRound([0,t]).domain(a||this.groups.map(e=>e.key)).paddingInner(r),subx:$e(),y:Tn().rangeRound([n,0]).domain(i),z:Tn()},this.groups.forEach(t=>{let r=t.key,a=t.values,f=this.groupInfo[r];if(t.index=this.scale.x.domain().indexOf(r),void 0!==f){e.append("g").selectAll(".violin-group-label").data(["pvalue"]).enter().append("text").attr("x",0).attr("y",0).attr("class","violin-group-label").attr("text-anchor","center").attr("fill",e=>"pvalue"==e&&parseFloat(f[e])<=parseFloat(f.pvalueThreshold)?"orangered":"SlateGray").attr("transform",(e,t)=>{return`translate(${this.scale.x(r)+this.scale.x.bandwidth()/2}, ${this.scale.y(i[0])+50})`}).text(e=>`${e}: ${parseFloat(parseFloat(f[e]).toPrecision(3)).toExponential()}`)}p&&a.sort((e,t)=>e.label<t.label?-1:e.label>t.label?1:0),this.scale.subx.domain(a.map(e=>e.label)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),a.forEach(n=>{0!=n.values.length&&(n.values=n.values.sort(ne),this._drawViolin(e,n,l,t.index,g,v))});var c=18;if(b){const t=$e().domain(a.map(e=>void 0==e.size?"(0)":`(${e.size||0})`)).rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]);e.append("g").attr("class","violin-size-axis").attr("transform",`translate(0, ${n+c})`).call(pi(t))}if(u){c=5;const t=e.append("g").attr("class","violin-sub-axis").attr("transform",`translate(0, ${n+c})`).call(pi(this.scale.subx));s>0&&t.selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${s}, 2, 10)`)}});let m=u?55:0;var y;if(this.xAxis=c?pi(this.scale.x):pi(this.scale.x).tickFormat(""),e.append("g").attr("class","violin-x-axis axis--x").attr("transform",`translate(0, ${n+m})`).call(this.xAxis).selectAll("text").attr("text-anchor","start").attr("transform",`rotate(${o}, -10, 10)`),m=5,this.yAxis=(y=this.scale.y,bi(ui,y)).tickValues(this.scale.y.ticks(5)),e.append("g").attr("class","violin-y-axis axis--y").attr("transform",`translate(-${m}, 0)`).call(this.yAxis),e.append("text").attr("class","violin-axis-label").attr("text-anchor","middle").attr("transform",`translate(-${2*m+J(".violin-y-axis").node().getBBox().width}, ${this.scale.y.range()[0]+(this.scale.y.range()[1]-this.scale.y.range()[0])/2}) rotate(-90)`).text(f),e.on("mouseout",()=>{void 0!==this.tooltip&&this.tooltip.hide()}),d&&this._addGroupDivider(e),h){const t=e.append("g").attr("id","violinLegend").attr("transform","translate(0, 0)");t.append("rect").attr("x",this.scale.x.range()[0]).attr("y",-35).attr("width",60*this.groups[0].values.length+10).attr("height",24).style("fill","none").style("stroke","silver");const n=t.selectAll(".violin-legend").data(this.groups[0].values).enter().append("g").classed("violin-legend",!0),r=10;n.append("rect").attr("x",(e,t)=>5+60*t+this.scale.x.range()[0]).attr("y",-28).attr("width",r).attr("height",r).style("fill",e=>e.color),n.append("text").attr("class","violin-legend-text").text(e=>e.label).attr("x",(e,t)=>17+60*t+this.scale.x.range()[0]).attr("y",-20)}}addPlotTitle(e,t){let n=(this.scale.x.range()[1]-this.scale.x.range()[0]+1)/2,r=this.scale.y.range()[1]-10;e.append("text").attr("class","violin-title").attr("text-anchor","middle").attr("transform",`translate(${n}, ${r})`).text(t)}createTooltip(e){return 0==$(`#${e}`).length&&$("<div/>").attr("id",e).appendTo($("body")),this.tooltip=new ri(e),J(`#${e}`).classed("violin-tooltip",!0),this.tooltip}createToolbar(e,t){return this.toolbar=new ni(e,t),this.toolbar}addBrush(e){const t=ef();t.on("end",()=>{this.zoom(e,t)}),e.append("g").attr("class","brush").call(t)}zoom(e,t){let n,r=O.selection;if(void 0===t)this.reset();else if(r){this.scale.x.domain(this.scale.x.domain().filter((e,t)=>{const n=Math.floor(r[0][0]/this.scale.x.bandwidth()),a=Math.floor(r[1][0]/this.scale.x.bandwidth());return t>=n&&t<=a}));const n=Math.floor(this.scale.y.invert(r[1][1])),a=Math.floor(this.scale.y.invert(r[0][1]));this.scale.y.domain([n,a]),e.select(".brush").call(t.move,null)}else{if(!n)return n=setTimeout(function(){n=null},350);this.reset()}let a=e.transition().duration(750);e.select(".axis--x").transition(a).call(this.xAxis),e.select(".axis--y").transition(a).call(this.yAxis),this.groups.forEach((t,n)=>{let r=t.key,i=t.values;this.scale.subx.rangeRound([this.scale.x(r),this.scale.x(r)+this.scale.x.bandwidth()]),i.forEach(n=>{if(0==n.values.length)return;this.scale.x.domain().indexOf(r);this.scale.z.range([this.scale.subx(n.label),this.scale.subx(n.label)+this.scale.subx.bandwidth()]);const i=e.select(`#violin${t.index}-${n.label}`);i.select(".violin").transition(a).attr("d",Si().x0(e=>this.scale.z(e[1])).x1(e=>this.scale.z(-e[1])).y(e=>this.scale.y(e[0])));const f=be(n.values,.25),c=be(n.values,.75);i.select(".violin-ir").transition(a).attr("x",this.scale.z(-.1)).attr("y",this.scale.y(c)).attr("width",Math.abs(this.scale.z(-.1)-this.scale.z(.1))).attr("height",Math.abs(this.scale.y(c)-this.scale.y(f)));const o=ge(n.values);i.select(".violin-median").transition(a).attr("x1",this.scale.z(-.1)).attr("x2",this.scale.z(.1)).attr("y1",this.scale.y(o)).attr("y2",this.scale.y(o))})})}_drawViolin(e,t,n,r,a,i){let f=rf(tf.gaussian,this.scale.y.ticks(100),nf.nrd(t.values));const c=oe(t.values),o=f(t.values).filter(e=>e[0]>=c[0]&&e[0]<=c[1]),u=e.append("g").attr("id",`violin${r}-${t.label}`).attr("class","violin-g").datum(t);if(t.values.length>=i&&o.length&&this._validVertices(o)){let i=pe(o,e=>Math.abs(e[1]));this.scale.z.domain([-i,i]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()]);let f=Si().x0(e=>this.scale.z(e[1])).x1(e=>this.scale.z(-e[1])).y(e=>this.scale.y(e[0]));const c=u.append("path").datum(o).attr("d",f).classed("violin",!0).style("fill",()=>void 0!==t.color?t.color:r%2==0?"#90c1c1":"#94a8b8"),s=be(t.values,.25),l=be(t.values,.75),d=this.scale.z.domain()[1]/3;if(n){const n=Math.abs(l-s),r=pe(t.values.filter(e=>e<=l+1.5*n)),a=ve(t.values.filter(e=>e>=s-1.5*n));e.append("line").classed("whisker",!0).attr("x1",this.scale.z(0)).attr("x2",this.scale.z(0)).attr("y1",this.scale.y(r)).attr("y2",this.scale.y(a)).style("stroke","#fff")}u.append("rect").attr("x",this.scale.z(-d)).attr("y",this.scale.y(l)).attr("width",Math.abs(this.scale.z(-d)-this.scale.z(d))).attr("height",Math.abs(this.scale.y(l)-this.scale.y(s))).attr("class","violin-ir");const h=ge(t.values);if(u.append("line").attr("x1",this.scale.z(-d)).attr("x2",this.scale.z(d)).attr("y1",this.scale.y(h)).attr("y2",this.scale.y(h)).attr("class","violin-median"),a){let e=we(0,d/2);const n=Math.abs(l-s),r=pe(t.values.filter(e=>e<=l+1.5*n)),a=ve(t.values.filter(e=>e>=s-1.5*n)),i=t.values.filter(e=>e<a||e>r);u.append("g").attr("class","violin-outliers").selectAll("circle").data(i).enter().append("circle").attr("cx",()=>this.scale.z(e())).attr("cy",e=>this.scale.y(e)).attr("r",2)}u.on("mouseover",()=>{c.classed("highlighted",!0),void 0===this.tooltip?console.warn("GroupViolin Warning: tooltip not defined"):this.tooltip.show(t.group+"<br/>"+t.label+"<br/>Median: "+h.toPrecision(4)+"<br/>")}),u.on("mouseout",()=>{c.classed("highlighted",!1)})}else if(i){let e=pe(t.values,e=>Math.abs(e));this.scale.z.domain([-e,e]).range([this.scale.subx(t.label),this.scale.subx(t.label)+this.scale.subx.bandwidth()]);const n=this.scale.z.domain()[1]/3;let r=we(0,n/2);u.append("g").attr("class","violin-points").selectAll("circle").data(t.values).enter().append("circle").attr("cx",()=>this.scale.z(r())).attr("cy",e=>this.scale.y(e)).attr("r",2)}}_sanityCheck(e){const t=["group","label","values"];e.forEach(e=>{t.forEach(t=>{if(void 0===e[t])throw"GroupedViolin: input data error."})})}_addGroupDivider(e){const t=this.scale.x.domain(),n=Math.abs(this.scale.x(this.scale.x.domain()[1])-this.scale.x(this.scale.x.domain()[0])-this.scale.x.bandwidth()),r=(e,r)=>r!==t.length-1?this.scale.x(e)+ +this.scale.x.bandwidth()+n/2:0;e.selectAll(".vline").data(t).enter().append("line").classed("vline",!0).attr("x1",r).attr("x2",r).attr("y1",this.scale.y.range()[0]).attr("y2",this.scale.y.range()[1]).style("stroke-width",(e,n)=>n!=t.length-1?1:0).style("stroke","rgb(86,98,107)").style("opacity",.5)}_validVertices(e){return!e.reduce((e,t)=>e.concat(t),[]).filter(e=>isNaN(e)).length}}const ff={id:"gtexGroupedViolinPlot",data:{heatmap:ye({x:50,y:10,scaleFactor:1e3}),dendroHeatmap:{rowTree:"(((TP53:0.17,SLK:0.17):1.18,NDRG4:1.34):1.33,ACTN3:2.67);",colTree:"(((Adipose Visceral Omentum:0.06,Adipose Subcutaneous:0.06):0.00,Bladder:0.06):0.16,Adrenal Gland:0.22);",heatmap:[{y:"SLK",value:35.505,x:"Adipose Subcutaneous",unit:"TPM"},{y:"SLK",value:29.28,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"SLK",value:17.405,x:"Adrenal Gland",unit:"TPM"},{y:"SLK",value:53.29,x:"Bladder",unit:"TPM"},{y:"NDRG4",value:12.035,x:"Adipose Subcutaneous",unit:"TPM"},{y:"NDRG4",value:6.531000000000001,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"NDRG4",value:134.8,x:"Adrenal Gland",unit:"TPM"},{y:"NDRG4",value:7.1160000000000005,x:"Bladder",unit:"TPM"},{y:"TP53",value:29.935,x:"Adipose Subcutaneous",unit:"TPM"},{y:"TP53",value:23.55,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"TP53",value:18.515,x:"Adrenal Gland",unit:"TPM"},{y:"TP53",value:40.51,x:"Bladder",unit:"TPM"},{y:"ACTN3",value:.33145,x:"Adipose Subcutaneous",unit:"TPM"},{y:"ACTN3",value:.3317,x:"Adipose Visceral Omentum",unit:"TPM"},{y:"ACTN3",value:.100005,x:"Adrenal Gland",unit:"TPM"},{y:"ACTN3",value:.48100000000000004,x:"Bladder",unit:"TPM"}]},groupedViolinPlot:[{group:"Group 1",label:"Gene 1",values:ue(0,2e3).map(we(2,1))},{group:"Group 1",label:"Gene 2",values:ue(0,2e3).map(we(5,1))},{group:"Group 1",label:"Gene 3",values:ue(0,2e3).map(we(10,1))},{group:"Group 2",label:"Gene 1",values:ue(0,2e3).map(we(5,1))},{group:"Group 2",label:"Gene 2",values:ue(0,2e3).map(we(3,1))},{group:"Group 2",label:"Gene 3",values:ue(0,2e3).map(we(1,1))},{group:"Group 3",label:"Gene 1",values:ue(0,2e3).map(we(2,1))},{group:"Group 3",label:"Gene 2",values:ue(0,2e3).map(we(3,1))},{group:"Group 3",label:"Gene 3",values:ue(0,2e3).map(we(5,1))}],transcriptTracks:{exons:{"ENST00000311595.9":[{chrom:"17",chromEnd:77071172,exonId:"ENSE00002713933.1",exonNumber:"1",chromStart:77071151,strand:"+"},{chrom:"17",chromEnd:77073579,exonId:"ENSE00003672628.1",exonNumber:"2",chromStart:77073512,strand:"+"},{chrom:"17",chromEnd:77073946,exonId:"ENSE00003475281.1",exonNumber:"3",chromStart:77073745,strand:"+"},{chrom:"17",chromEnd:77075719,exonId:"ENSE00001111713.1",exonNumber:"4",chromStart:77075571,strand:"+"},{chrom:"17",chromEnd:77076446,exonId:"ENSE00003651250.1",exonNumber:"5",chromStart:77076289,strand:"+"},{chrom:"17",chromEnd:77077155,exonId:"ENSE00003607773.1",exonNumber:"6",chromStart:77077007,strand:"+"},{chrom:"17",chromEnd:77078612,exonId:"ENSE00002720924.1",exonNumber:"7",chromStart:77077980,strand:"+"}]},transcripts:[{chromosome:"17",end:77078612,gencodeId:"ENSG00000167280.12",geneSymbol:"ENGASE",start:77071151,strand:"+",transcriptId:"ENST00000311595.9"}]},bubbleMap:ye({x:50,y:10,scaleFactor:1,diverging:!0,bubble:!0}),ldPlot:ye({x:2,y:2,scaleFactor:1})}.groupedViolinPlot,width:500,height:300,marginLeft:100,marginRight:20,marginTop:50,marginBottom:100,showDivider:!0,xPadding:.3,yLabel:"Random Value",showSubX:!0,showX:!0,xAngle:0,subXAngle:0,showWhisker:!1,showLegend:!1,showSampleSize:!0};function cf(e=ff){console.log(e.data);let t={top:e.marginTop,right:e.marginRight,bottom:e.marginBottom,left:e.marginLeft};me(e.id);let n=e.width-(e.marginLeft+e.marginRight),r=e.height-(e.marginTop+e.marginBottom),a=(e.id,`${e.id}Tooltip`),i=function(e,t,n,r,a,i="relative"){return me(e),void 0===a&&(a=`${e}-svg`),J("#"+e).append("svg").attr("width",t).attr("height",n).attr("id",a).append("g").attr("transform",`translate(${r.left}, ${r.top})`)}(e.id,e.width,e.height,t);const f=new af(e.data);return f.render(i,n,r,e.xPadding,void 0,[],e.yLabel,e.showX,e.xAngle,e.showSubX,e.subXAngle,e.showWhisker,e.showDivider,e.showLegend,e.showSampleSize,e.sortSubX,e.showOutliers,e.numPoints),i.selectAll(".violin-size-axis").classed("violin-size-axis-hide",!0).classed("violin-size-axis",!1),f.createTooltip(a),i}return e.render=function(e,t,n,r,a,i=function(){const e="https://gtexportal.org/rest/v1/";return{singleTissueEqtl:e+"association/singleTissueEqtl?format=json&datasetId=gtex_v8&gencodeId=",ld:e+"dataset/ld?format=json&datasetId=gtex_v8&gencodeId=",dyneqtl:e+"association/dyneqtl",snp:e+"reference/variant?format=json&snpId=",variantId:e+"dataset/variant?format=json&variantId=",exonExp:e+"expression/medianExonExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcriptExp:e+"expression/medianTranscriptExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",junctionExp:e+"expression/medianJunctionExpression?datasetId=gtex_v8&hcluster=true&gencodeId=",transcript:e+"reference/transcript?datasetId=gtex_v8&gencodeId=",exon:e+"reference/exon?datasetId=gtex_v8&gencodeId=",geneModel:e+"dataset/collapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneModelUnfiltered:e+"dataset/fullCollapsedGeneModelExon?datasetId=gtex_v8&gencodeId=",geneExp:e+"expression/geneExpression?datasetId=gtex_v8&gencodeId=",medGeneExp:e+"expression/medianGeneExpression?datasetId=gtex_v8&hcluster=true&pageSize=10000",geneExpBoxplot:e+"expression/geneExpression?datasetId=gtex_v8&boxplotDetail=full&gencodeId=",topInTissueFiltered:e+"expression/topExpressedGene?datasetId=gtex_v8&filterMtGene=true&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",topInTissue:e+"expression/topExpressedGene?datasetId=gtex_v8&sortBy=median&sortDirection=desc&pageSize=50&tissueSiteDetailId=",geneId:e+"reference/gene?format=json&gencodeVersion=v26&genomeBuild=GRCh38%2Fhg38&geneId=",tissue:e+"dataset/tissueInfo?format=json&datasetId=gtex_v8",sample:"tmpSummaryData/gtex.Sample.csv",rnaseqCram:"tmpSummaryData/rnaseq_cram_files_v7_dbGaP_011516.txt",wgsCram:"tmpSummaryData/wgs_cram_files_v7_hg38_dbGaP_011516.txt",fcBilling:"https://api.firecloud.org/api/profile/billing",fcWorkSpace:"https://api.firecloud.org/api/workspaces",fcPortalWorkSpace:"https://portal.firecloud.org/#workspaces"}}()){var f,c;(f=i.dyneqtl+`?variantId=${n}&gencodeId=${t}&tissueSiteDetailId=${r}`,c={credentials:"include"},fetch(f,c).then(o)).then(function(t){let n=function(e){["data","genotypes","pValue","pValueThreshold","tissueSiteDetailId"].forEach(t=>{if(!e.hasOwnProperty(t))throw console.error(e),"Parse Error: Required json attribute is missing: "+t}),e.expression_values=e.data.map(e=>parseFloat(e)),e.genotypes=e.genotypes.map(e=>parseFloat(e)),e.homoRefExp=e.expression_values.filter((t,n)=>0==e.genotypes[n]),e.homoAltExp=e.expression_values.filter((t,n)=>2==e.genotypes[n]),e.heteroExp=e.expression_values.filter((t,n)=>1==e.genotypes[n]);let t=e.variantId.split(/_/)[2],n=e.variantId.split(/_/)[3];return e.het=t+n,e.ref=t+t,e.alt=n+n,e}(t);e.data=[{group:a||n.tissueSiteDetailId,label:n.ref.length>2?"ref":n.ref,size:n.homoRefExp.length,values:n.homoRefExp},{group:a||n.tissueSiteDetailId,label:n.het.length>2?"het":n.het,size:n.heteroExp.length,values:n.heteroExp},{group:a||n.tissueSiteDetailId,label:n.alt.length>2?"alt":n.alt,size:n.homoAltExp.length,values:n.homoAltExp}],e.numPoints=10,cf(e)})},e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
